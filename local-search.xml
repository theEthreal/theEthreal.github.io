<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>方法详解</title>
    <link href="/2022/05/21/%E4%BD%95%E8%B0%93%E6%96%B9%E6%B3%95/"/>
    <url>/2022/05/21/%E4%BD%95%E8%B0%93%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li><strong>System.out.println（）就是一个典型的方法</strong></li></ul><p><strong>java方法类似于C语言中的函数，是完成特定功能的代码片段</strong></p><h3 id="java方法就是语句的集合，它们一起执行完成一个功能"><a href="#java方法就是语句的集合，它们一起执行完成一个功能" class="headerlink" title="java方法就是语句的集合，它们一起执行完成一个功能"></a>java方法就是语句的集合，它们一起执行完成一个功能</h3><ul><li><strong>方法是解决一类问题的步骤的有序集合</strong></li><li><strong>方法包含于类或者对象中</strong></li><li><strong>方法在程序中被创建，在其他地方被引用</strong></li></ul><h2 id="设计方法的原则："><a href="#设计方法的原则：" class="headerlink" title="设计方法的原则："></a>设计方法的原则：</h2><p><strong>保持方法的原子性，即一个方法只完成一个功能，这样做有利于后期的扩展</strong></p><h2 id="方法的定义："><a href="#方法的定义：" class="headerlink" title="方法的定义："></a>方法的定义：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 返回值类型 方法名(参数类型 参数名)&#123;<br>···<br>方法体<br>···<br><span class="hljs-keyword">return</span> 返回值;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>方法包含方法头和方法体。</strong></p><ul><li><p><strong>修饰符</strong>：可选的，它可以告诉编译器如何调用方法。定义方法的访问类型</p></li><li><p><strong>返回值类型</strong>：returnValueType是返回值的数据类型，有些方法可能会有返回值，有些方法执行操作但没有返回值，没有返回值的方法returnValueType的关键字是<em><strong>void</strong></em></p><ul><li><strong>return</strong>除了返回值，还可以<em><strong>终止方法</strong></em>，一旦程序运行中碰到<strong>return</strong>，这个方法就结束了</li></ul></li><li><p><strong>方法名</strong>：方法的名字，与参数表一起构成方法签名</p><blockquote><p>参考[[java中的变量#变量的命名规范]]</p></blockquote></li><li><p><strong>参数类型</strong>：参数是可选的，方法可以不包含任何参数；当方法被调用的时候，传递值给参数，这个值被称为实参或变量。参数列表指方法的参数类型、顺序和个数。</p><ul><li><em>形式参数</em>：在方法被调用是用于接收外界输入的数据</li><li><em>实际参数</em>：调用方法时实际传给方法的数据</li></ul></li></ul></li></ul><h2 id="方法的调用："><a href="#方法的调用：" class="headerlink" title="方法的调用："></a>方法的调用：</h2><p><strong>调用方法：对象名.方法名(实参列表)</strong></p><p><strong>java提供两种调用方法的方式，根据该方法是否有返回值来决定</strong></p><ul><li>当方法返回一个值的时候，方法调用通常就被当成一个值，例如：<br><code>int bigger = max(30,40);</code></li><li>当方法返回值类型为 <em><strong>void</strong></em> 时，方法调用一定是一条语句，例如：<br><code>System.out.println(&quot;hello,world!&quot;);</code></li></ul><h2 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h2><blockquote><p><strong>值传递是对于基本数据类型而言，引用传递是对于引用数据类型而言</strong></p></blockquote><ul><li><p><strong>值传递</strong>：是指在调用函数时，将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，就<strong>不会影响到实际参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//值传递</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test01</span>().change(number);<br>        System.out.println(<span class="hljs-string">&quot;number=&quot;</span>+number);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>        a=a+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">number=<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></li><li><p><strong>引用传递</strong>：是指在调用函数时，将实际参数的地址传递到函数中，那么在函数中对参数进行修改，将<strong>会影响到实际参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//引用传递</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test01</span>().change(user);<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(User a)</span>&#123;<br>        a.setName(<span class="hljs-string">&quot;小张&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">小张<br></code></pre></td></tr></table></figure></li></ul><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p><strong>&#x3D;&#x3D;引用类型中的String的值是存放在常量池中的，我们改变它副本的值是不会影响到原来的值的&#x3D;&#x3D;</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//String类型的引用传递</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test01</span>().change(str);<br>        System.out.println(str);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String a)</span>&#123;<br>        a=<span class="hljs-string">&quot;yes&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hello<br></code></pre></td></tr></table></figure><h2 id="方法重载："><a href="#方法重载：" class="headerlink" title="方法重载："></a>方法重载：</h2><ul><li><strong>重载就是在一个类中，有相同名字，但形参不同的方法</strong></li></ul><p><strong>实现原理：<br>    在JVM运行过程中，当方法名相同时，编译器会根据调用方法的参数个数、参数类型、参数顺序去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错</strong></p><ul><li><strong>方法重载的规则</strong><ul><li><strong>方法名必须相同</strong></li><li><strong>参数列表必须不同</strong>（可以是个数不同、类型不同、或者顺序不同）</li><li>**方法的返回值类型可以相同也可以不同</li></ul></li></ul><h2 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h2><p>运行某程序时再给它传递消息，可以通过传递命令行参数给main()方法实现。</p><p>程序功能如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.duyuan;  <br><span class="hljs-comment">//命令行传参 测试  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cdTest</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;  <br>            System.out.println(<span class="hljs-string">&quot;args[&quot;</span>+i+<span class="hljs-string">&quot;]:&quot;</span>+args[i]);  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>通过cmd命令将 <em>cdTest.java源文件</em>  编译为class字节码文件后再通过cmd命令进行执行时，&#x3D;&#x3D;必须要回到src路径下再加上文件的包路径才能正确执行&#x3D;&#x3D;：</strong></p><p><img src="/img/post_img/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BC%A0%E5%8F%82error.jpg"></p><p><strong>正确如下：</strong><br><img src="/img/post_img/test.jpg"></p><p><strong>如上所示已经正确运行了程序，我们再直接在命令行后面加上参数就可以实现命令行传参，并成功运行</strong>：</p><p><img src="/img/post_img/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BC%A0%E5%8F%82%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8.jpg"></p><h2 id="可变参数-不定项参数-："><a href="#可变参数-不定项参数-：" class="headerlink" title="可变参数(不定项参数)："></a>可变参数(不定项参数)：</h2><ul><li>从JDK1.5开始，Java支持传递&#x3D;&#x3D;同类型&#x3D;&#x3D;的可变参数给一个方法</li><li>在方法声明中，在指定参数类型后加一个省略号(…)即可实现可变参数</li><li>一个方法中只能指定一个可变参数，&#x3D;&#x3D;它必须是方法的最后一个参数&#x3D;&#x3D;。所有的普通参数都要在可变参数之前声明。</li></ul><p>eg：实现输出得到输入数据中最大的数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.duyuan;  <br><span class="hljs-comment">//通过可变参数实现输出得到输入数据中最大的数  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        printMax(<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5.4</span>,<span class="hljs-number">94.4</span>,<span class="hljs-number">52</span>);<span class="hljs-comment">//第一种调用可变参数的方式  </span><br>        System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);  <br>        printMax(<span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5.5</span>,<span class="hljs-number">46.1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">11</span>&#125;);<span class="hljs-comment">//第二种调用可变参数的方式  </span><br>  <br>    &#125;  <br><span class="hljs-comment">//排序算法  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMax</span><span class="hljs-params">(<span class="hljs-type">double</span>... numbers)</span>&#123;<span class="hljs-comment">//声明可变参数 numbers  </span><br>        <span class="hljs-keyword">if</span> (numbers.length==<span class="hljs-number">0</span>) &#123;  <br>            System.out.println(<span class="hljs-string">&quot;没有输入&quot;</span>);  <br>            <span class="hljs-keyword">return</span>;  <br>        &#125;  <br>        <span class="hljs-type">double</span> result=numbers[<span class="hljs-number">0</span>];  <br>  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; numbers.length;i++)&#123;  <br>              <span class="hljs-keyword">if</span>(numbers[i]&gt;result)&#123;  <br>                  result=numbers[i];  <br>              &#125;  <br>        &#125;  <br>        System.out.println(<span class="hljs-string">&quot;最大数是：&quot;</span>+result);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><br>最大数是：<span class="hljs-number">94.4</span><br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br>最大数是：<span class="hljs-number">46.1</span><br><br>Process finished with exit code <br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用DOS命令</title>
    <link href="/2022/05/20/%E5%B8%B8%E7%94%A8DOS%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/05/20/%E5%B8%B8%E7%94%A8DOS%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="盘符切换"><a href="#盘符切换" class="headerlink" title="盘符切换"></a>盘符切换</h1><p><code>D:</code><br><code>E:</code></p><blockquote><p>冒号是英文的冒号</p></blockquote><h1 id="查看当前目录的所有文件"><a href="#查看当前目录的所有文件" class="headerlink" title="查看当前目录的所有文件"></a>查看当前目录的所有文件</h1><p> <code>dir</code></p><h1 id="改变目录"><a href="#改变目录" class="headerlink" title="改变目录"></a>改变目录</h1><p>切换盘  <code>cd /d f:</code><br>返回当前目录的上一级 <code>cd..</code><br>进入当前目录的下一级 <code>cd 文件名</code></p><h1 id="清理当前屏幕"><a href="#清理当前屏幕" class="headerlink" title="清理当前屏幕"></a>清理当前屏幕</h1><p> <code>cls</code></p><h1 id="退出终端"><a href="#退出终端" class="headerlink" title="退出终端"></a>退出终端</h1><p> <code>exit</code></p><h1 id="查看电脑ip"><a href="#查看电脑ip" class="headerlink" title="查看电脑ip"></a>查看电脑ip</h1><p> <code>ipconfig</code></p><h1 id="打开软件"><a href="#打开软件" class="headerlink" title="打开软件"></a>打开软件</h1><p> 计算器<br> <code>calc</code><br> 画图<br> <code>mspaint</code><br> 记事本<br> <code>notepad</code></p><h1 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h1><p> 得到一些网站信息<code>ping 网址</code></p><h1 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h1><p>创建文件夹<br><code>md 文件夹名</code><br>创建文件<br><code>cd&gt;文件名.文件后缀</code><br>删除文件<br><code>del 文件名.文件后缀</code><br>清除文件夹<br><code>rd 文件夹名</code></p><blockquote><p>清除目录需要在它的上一级进行操作</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/20/hello-world/"/>
    <url>/2022/05/20/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Scanner与用户进行交互</title>
    <link href="/2022/05/18/Scanner%E4%B8%8E%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92/"/>
    <url>/2022/05/18/Scanner%E4%B8%8E%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>通过Scanner类来获得用户的输入</strong></p><h1 id="Scanner用完以后要关闭！！！"><a href="#Scanner用完以后要关闭！！！" class="headerlink" title="Scanner用完以后要关闭！！！"></a>Scanner用完以后要关闭！！！</h1><h1 id="Scanner用完以后要关闭！！！-1"><a href="#Scanner用完以后要关闭！！！-1" class="headerlink" title="Scanner用完以后要关闭！！！"></a>Scanner用完以后要关闭！！！</h1><h1 id="Scanner用完以后要关闭！！！-2"><a href="#Scanner用完以后要关闭！！！-2" class="headerlink" title="Scanner用完以后要关闭！！！"></a>Scanner用完以后要关闭！！！</h1><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>&#96;Scanner  s  &#x3D;  new  Scanner(System.in)</p><h2 id="通过Scanner类的next-与nextLine-获取用户输入的字符串"><a href="#通过Scanner类的next-与nextLine-获取用户输入的字符串" class="headerlink" title="**通过Scanner类的next()与nextLine()获取用户输入的字符串"></a>**通过Scanner类的next()与nextLine()获取用户输入的字符串</h2><h3 id="next-："><a href="#next-：" class="headerlink" title="next()："></a>next()：</h3><ul><li>**只有读取到有效字符后才能够结束输入</li><li>**在读取到有效字符之前的空白，next()方法会自动把它们删掉</li><li>**读取到有效字符后的空白，next()方法会将空白作为结束符</li><li>***next()方法无法得到含空白的字符串<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.duyuan.com.duyuan;  <br>  <br><span class="hljs-keyword">import</span> java.util.Scanner;  <br><span class="hljs-comment">//next()方法测试  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">scanner</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        Scanner scanner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//获得输入  </span><br>        System.out.println(<span class="hljs-string">&quot;使用next方法接收&quot;</span>);  <br>        System.out.println(<span class="hljs-string">&quot;=========================&quot;</span>);  <br>        <span class="hljs-keyword">if</span>(scanner.hasNext()==<span class="hljs-literal">true</span>)&#123;<span class="hljs-comment">//判断是否还有输入  </span><br>            String str= scanner.next();  <br>            System.out.println(<span class="hljs-string">&quot;获得的数据是：&quot;</span>+str);<br>            scanner.close();  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&quot;C:\Program Files\Java\jdk1.8.0_201\bin\java.exe&quot; &quot;-<br><span class="hljs-section">使用next方法接收</span><br><span class="hljs-section">=========================</span><br>这是next()方法  测试<br>获得的数据是：这是next()方法<br><br>Process finished with exit code 0<br></code></pre></td></tr></table></figure><h3 id="nextLine-："><a href="#nextLine-：" class="headerlink" title="nextLine()："></a>nextLine()：</h3><ul><li><strong>以Enter作为结束符，也就是说nextLine()方法会返回按下回车之前输入的所有字符</strong></li><li><strong>nextLine()方法可以得到有空白的字符串</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.duyuan.scanner;  <br>  <br><span class="hljs-keyword">import</span> java.util.Scanner;  <br>  <br><span class="hljs-comment">//这是nextLine()方法测试  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">nextLineMethod</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        Scanner scanner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//获得输入数据  </span><br>        System.out.println(<span class="hljs-string">&quot;使用nextLine()方法接收&quot;</span>);  <br>        System.out.println(<span class="hljs-string">&quot;======================&quot;</span>);  <br>        <span class="hljs-comment">//判断是否还有输入  </span><br>        <span class="hljs-keyword">if</span>(scanner.hasNextLine()==<span class="hljs-literal">true</span>)&#123;  <br>            String str= scanner.nextLine();  <br>            System.out.println(<span class="hljs-string">&quot;获得的数据：&quot;</span>+str);<br>            scanner.close();<br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&quot;C:\Program Files\Java\jdk1.8.0_201\bin\java.exe&quot; &quot;-<br><span class="hljs-section">使用nextLine()方法接收</span><br><span class="hljs-section">======================</span><br>这是nextLine()方法   测试<br>获得的数据：这是nextLine()方法   测试<br><br>Process finished with exit code 0<br></code></pre></td></tr></table></figure><h2 id="通过hasNext-与hasNextLine-来判断是否还有输入"><a href="#通过hasNext-与hasNextLine-来判断是否还有输入" class="headerlink" title="通过hasNext()与hasNextLine()来判断是否还有输入"></a>通过hasNext()与hasNextLine()来判断是否还有输入</h2><p><strong>一般在循环中使用，在上面的Demo中可加可不加；</strong></p><h3 id="利用hasNext-方法实现退出循环"><a href="#利用hasNext-方法实现退出循环" class="headerlink" title="利用hasNext()方法实现退出循环"></a>利用hasNext()方法实现退出循环</h3><p><strong>example：写一程序，允许用户输入多个数字，并求它们的和与平均数，通过输入非数字数据来结束输入并输出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.duyuan.scanner;  <br><span class="hljs-keyword">import</span> java.util.Scanner;  <br><span class="hljs-comment">//写一程序，允许用户输入多个数字，并求它们的和与平均数，通过输入非数字数据来结束输入并输出结果  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo01</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        Scanner scanner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);  <br>        <span class="hljs-type">double</span> sum=<span class="hljs-number">0.0</span>;<span class="hljs-comment">//和  </span><br>        <span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;<span class="hljs-comment">//输入数字的个数  </span><br>        <span class="hljs-keyword">while</span> (scanner.hasNextDouble()==<span class="hljs-literal">true</span>)&#123;<span class="hljs-comment">//判断输入的数据是否是数字  </span><br>            <span class="hljs-type">double</span> x=scanner.nextDouble();  <br>            sum=sum+x;  <br>            n++;  <br>        &#125;  <br>        System.out.println(<span class="hljs-string">&quot;你输入的数字个数为&quot;</span>+n);  <br>        System.out.println(<span class="hljs-string">&quot;和为：&quot;</span>+sum);  <br>        System.out.println(<span class="hljs-string">&quot;平均数为：&quot;</span>+sum/n);  <br>        scanner.close();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-string">&quot;C:\Program Files\Java\jdk1.8.0_201\bin\java.exe&quot;</span> <span class="hljs-comment">&quot;-</span><br><span class="hljs-number">10</span><br><span class="hljs-number">20</span><br><span class="hljs-number">30</span><br><span class="hljs-number">40</span><br><span class="hljs-keyword">x</span><br>你输入的数字个数为<span class="hljs-number">4</span><br>和为：<span class="hljs-number">100.0</span><br>平均数为：<span class="hljs-number">25.0</span><br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java中的数据类型</title>
    <link href="/2022/05/17/Java%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/05/17/Java%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>Java是一种强类型语言</strong>——安全性更高</p><p>要求变量的使用严格符合规定，所有的变量都必须先定义后才能使用</p><hr><h1 id="java中的数据类型"><a href="#java中的数据类型" class="headerlink" title="java中的数据类型"></a>java中的数据类型</h1><p>[[Java中的标识符和关键字]]</p><blockquote><p>除了基本数据类型，其他的都是引用数据类型</p></blockquote><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul><li><p>数值类型</p><ul><li>整数型</li></ul><blockquote><p>拓展：java中不同进制整数的表示</p><p>二进制：0b开头</p><p>八进制：0开头</p><p>十六进制：0x开头</p></blockquote><ol><li><p>byte 1个字节</p></li><li><p>short 2个字节</p></li><li><p>int 4个字节</p></li><li><p>long 8个字节</p><blockquote><p>一般用到long的时候会在数字后面加一个L以作标识</p><p><code>long num=100L</code></p></blockquote></li></ol><ul><li>浮点型</li></ul><p><em><strong>尽量避免用浮点型数据进行比较，大数使用BigDecimal类进行操作</strong></em></p><blockquote><p>BigDecimal类是一个数学工具类</p><p>float与double类型的浮点数是有限、离散的，具有舍入误差，它只能表示一个接近但不等于的约数；</p><p>example：银行业务，大额的钱怎么表示，不能用float或者double，应该使用BigDecimal类</p><hr><p>float f&#x3D;0.1；</p><p>double d&#x3D;1.0&#x2F;10;</p><p>System.out.printf(f &#x3D;&#x3D; d)会判断为f不等于d</p><hr><p>float f1&#x3D;23259562999999</p><p>float f2&#x3D;f1+1</p><p>System.out.printf(f1 &#x3D;&#x3D; f2)会判定为真，即f1&#x3D;f2</p></blockquote><ol><li>float 4个字节</li><li>double 8个字节</li></ol><ul><li>字符型char 2个字节</li></ul><blockquote><p><em><strong>字符本质上仍然是数字</strong></em></p><p>字符的编码来自于Unicode表，Unicode表  0—65536</p><p>转码表示范围：U0000—UFFFF</p><p>char c&#x3D;’\u0061’实际上c&#x3D;’a’</p></blockquote></li><li><p>boolean类型——true和false 占<strong>1位</strong></p></li></ul><blockquote><p><strong>位(bit)<strong>与</strong>字节(byte)<strong>的关系：</strong>bit</strong>是计算机中内部数据存储的最小单元，example：11001100是一个八位二进制数；</p><p><strong>byte</strong>一般用<em><strong>B</strong></em>来表示，是计算机中进行数据处理的基本单位，<strong>1B&#x3D;8bit</strong></p><p>可以理解为<strong>bit</strong>是一个存储单元，而<strong>byte</strong>是一行8个存储单元</p><p><strong>字符</strong>：计算机使用的字母、数字、字、符号</p></blockquote><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ul><li>类</li><li>接口</li><li>数组</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java中的运算符</title>
    <link href="/2022/05/17/Java%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2022/05/17/Java%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="java支持的运算符"><a href="#java支持的运算符" class="headerlink" title="java支持的运算符"></a>java支持的运算符</h1><ul><li>算术运算符：+，-，*，&#x2F;，%，++，–</li><li>赋值运算符：&#x3D;，+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;</li><li>关系运算符：&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;,&#x3D;&#x3D; ,!&#x3D;intstanceof</li><li>逻辑运算符：与&amp;&amp;，或||，非！</li><li>位运算符：&amp;，|，^，~，&gt;&gt;（右移）,&lt;&lt;（左移）,&gt;&gt;&gt;</li><li>条件运算符：？：</li></ul><h1 id="a与a"><a href="#a与a" class="headerlink" title="++a与a++"></a>++a与a++</h1><p><em><strong>a–和–a同理</strong></em></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>()</span>&#123;<br><span class="hljs-built_in">int</span> a=<span class="hljs-number">3</span>;<br><span class="hljs-built_in">int</span> b=a++;<br><span class="hljs-comment">//a++是执行这行代码后，先把值赋给b，后自增</span><br><span class="hljs-built_in">int</span> c=++a;<br><span class="hljs-comment">//++a是执行这行代码前，先自增，再把自增后的值赋给c</span><br><br>System.<span class="hljs-keyword">out</span>.printf(a)<br>System.<span class="hljs-keyword">out</span>.printf(b)<br>System.<span class="hljs-keyword">out</span>.printf(c)<br><span class="hljs-comment">//结果是a=5,b=3,c=5</span><br>&#125; <br></code></pre></td></tr></table></figure><h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><p>***针对于二进制数的每一位</p><p>A&#x3D;0011 1100<br>B&#x3D;0000 1101</p><hr><ul><li>A&amp;B&#x3D;0000 1100 与：两个二进制数的对应位上都是1，才为1</li><li>A|B &#x3D;0011 1101   或：两个二进制数对应位上有一个1，就为1</li><li>A^B &#x3D;0011 0001  异或：两个二进制数对应位上不相同，才为1</li><li>~A &#x3D;1100 0011    </li><li>~B &#x3D;1111 0010     取反：每一位都取反</li></ul><h3 id="lt-lt-左移，-gt-gt-右移"><a href="#lt-lt-左移，-gt-gt-右移" class="headerlink" title="&lt;&lt;左移，&gt;&gt;右移"></a>&lt;&lt;左移，&gt;&gt;右移</h3><p>example：怎么最快的计算2 * 8<br>2 * 8&#x3D;2 * 2 * 2 * 2<br>2&#x3D;0000 0010<br>向左移3位<br>2&lt;&lt;3 &#x3D; 0001 0000 &#x3D; 16<br>即：*<em>左移×2，右移÷2</em></p><blockquote><p>***位运算的效率极高，多用于底层</p></blockquote><h1 id="sout中的字符串连接符"><a href="#sout中的字符串连接符" class="headerlink" title="sout中的字符串连接符      +"></a>sout中的字符串连接符      +</h1><p>***在出现+之后，会将输出内容都转化为字符串类型，在出现+之前则是进行正常运算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">20</span>;<br>System.out.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&#x27; &#x27;</span>+a+b);<span class="hljs-comment">//输出1020</span><br>System.out.<span class="hljs-built_in">printf</span>(a+b+<span class="hljs-string">&#x27; &#x27;</span>);<span class="hljs-comment">//输出30</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java变量</title>
    <link href="/2022/05/17/java%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/"/>
    <url>/2022/05/17/java%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><strong><code>  数据类型 变量名 = 值 ;</code></strong></p><ul><li>变量就是可以变化的量</li><li>Java是一种强类型语言，每个变量都必须声明类型</li><li>Java中变量是程序最基本的存储单元</li><li>变量的要素包括：<em><strong>变量类型、变量名、作用域</strong></em></li><li>每个变量都必须有类型，可以是基本类型，也可以是引用类型</li><li>变量名必须是合法的标识符</li><li>变量的声明是一条完整语句，每个声明都要以分号结束</li></ul><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><ul><li><em><strong>类变量</strong></em></li><li><em><strong>实例变量</strong></em></li><li><em><strong>局部变量</strong></em></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br>    <span class="hljs-keyword">static</span> 变量类型 变量名 = 值;<span class="hljs-comment">//这是类变量,从属于类</span><br>    <br>    变量类型 变量名(= 值);<span class="hljs-comment">/*这是实例变量，实例变量从属于对象；如果不进行初始化，它的值就是该类型的默认值；</span><br><span class="hljs-comment">    0或0.0</span><br><span class="hljs-comment">    布尔型默认值是false</span><br><span class="hljs-comment">    除了基本类型，其他的默认值都是null*/</span><br>&#125;<br><br><span class="hljs-comment">//main方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    变量类型 变量名 = 值;<span class="hljs-comment">//这是局部变量，必须声明和初始化</span><br>&#125;<br><br><span class="hljs-comment">//其他方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>常量（Constant）：初始化（initialize）后就<strong>不能再改变</strong>的量，可以理解为一种特殊的变量，它初始化后，在程序运行过程中<strong>不允许改变</strong></p><p><code> final 常量名 = 值 ;</code></p><p><code> final PI = 3.14;</code></p><ul><li>常量名一般用大写</li></ul><blockquote><p><em><strong>final与static都是修饰符，修饰符不区分先后</strong></em></p></blockquote><h1 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h1><p>参考[[Java中的标识符和关键字]]</p><ul><li>所有的变量、方法、类名：要求见名知意</li><li>类成员变量——首字母小写和峰原则：monthSalary、lastName</li><li>局部变量——首字母小写和驼峰原则</li><li>常量——大写字母和下划线：MAX_VALUE</li><li>类名——首字母大写和驼峰原则：Man、GoodMan</li><li>方法名——首字母小写和驼峰原则：run()、runAway()</li></ul><blockquote><p>***驼峰原则：当由两个或以上的单词组成命名时，第一个单词首字母小写，后面的单词首字母都要大写</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java标识符&amp;关键字</title>
    <link href="/2022/05/14/Java%E4%B8%AD%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2022/05/14/Java%E4%B8%AD%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java中的关键字"><a href="#Java中的关键字" class="headerlink" title="Java中的关键字"></a>Java中的关键字</h1><p><img src="C:\Users\Etheral\Documents\Code文档\java\Java关键字.jpg" alt="关键字"></p><blockquote><p><a href="https://blog.csdn.net/weixin_47325151/article/details/120331683">关键字的用法</a></p></blockquote><hr><p><strong>Java中所有组成部分都需要名字，类名、方法名、变量名就称为标识符</strong></p><hr><h1 id="标识符注意点"><a href="#标识符注意点" class="headerlink" title="标识符注意点"></a>标识符注意点</h1><ul><li><p>所有标识符首字符只能是大小写字母，美刀符$，下划线_</p></li><li><p>首字符之后可以是字母，数字，下划线，美元符的任意组合</p></li><li><p><strong>不能使用关键字</strong></p></li><li><p><strong>标识符是区分大小写的</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java中的三种注释</title>
    <link href="/2022/05/14/Java%E4%B8%AD%E7%9A%84%E6%B3%A8%E9%87%8A/"/>
    <url>/2022/05/14/Java%E4%B8%AD%E7%9A%84%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java中的注释"><a href="#Java中的注释" class="headerlink" title="Java中的注释"></a>Java中的注释</h1><ol><li><p>单行注释</p><p><code>//注释内容</code></p></li><li><p>多行注释</p><p><code>/*</code></p><p><code>注释内容</code></p><p><code>注释内容</code></p><p><code>*/</code></p></li><li><p>文档注释</p><p>JavaDoc<br>**内容：</p><ul><li>@author     *作者名</li><li>@version    <em>版本号</em></li><li>@since       <em>指明需要最早使用的JDK版本</em></li><li>@param      <em>参数名</em></li><li>@return      *返回值情况</li><li>@throws    <em>异常抛出情况</em></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">注释内容</span><br><span class="hljs-comment">@</span><br><span class="hljs-comment">别的功能和内容</span><br></code></pre></td></tr></table></figure></li></ol><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">package</span> <span class="hljs-variable">com</span>.<span class="hljs-property">duyuan</span>;  <br>  <br><span class="hljs-comment">/**类注释  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> duyuan  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.8 * */</span><span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">javaDoc</span> &#123;  <br><span class="hljs-title class_">String</span> <span class="hljs-variable">name</span>;  <br>  <br>    <span class="hljs-comment">/**方法注释  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> duyuan  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@version</span> 1.8     * <span class="hljs-doctag">@param</span> name  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception  </span><br><span class="hljs-comment">     *  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-variable">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">test</span>(<span class="hljs-title class_">String</span> <span class="hljs-variable">name</span>) <span class="hljs-variable">throws</span> <span class="hljs-title class_">Exception</span>&#123;  <br>  <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">name</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>***使用文档注释后，可以通过cmd或者IDE生成注释文档</p><p>**cmd命令：<br>javadoc -encoding UTF-8 -charset UTF-8 文件名.java<br>![[JavaDoc.jpg]]</p><p>**在IDEA中<br>上方工具栏中的Tools—&gt;Generate JavaDoc—&gt;Output directory选择存放文档地址—&gt;Locale: zh_CN配置语言为中文，Command line arguments:-encoding UTF-8 -charset UTF-8使用UTF8编码—&gt;Generate<br>![[JavaDoc生成.jpg]]</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java简述</title>
    <link href="/2022/05/14/Java%E7%AE%80%E8%BF%B0/"/>
    <url>/2022/05/14/Java%E7%AE%80%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="C-and-C"><a href="#C-and-C" class="headerlink" title="C and C++"></a>C and C++</h1><ul><li>1982年C++诞生</li><li>面向对象</li><li>图形、游戏领域</li></ul><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ul><li><del>Java 2标准版（J2SE）：桌面端</del></li><li><del>java 2移动版（J2ME）：手机端</del></li><li>Java 2企业版（J2EE）：服务器端</li></ul><blockquote><p>三高问题：高性能，高可用，高并发</p></blockquote><h2 id="基于Java开发的系统、平台、工具"><a href="#基于Java开发的系统、平台、工具" class="headerlink" title="基于Java开发的系统、平台、工具"></a>基于Java开发的系统、平台、工具</h2><ul><li>构建工具：Ant、Maven、Jekins</li><li>应用服务器：Tomcat、Jetty、Jboss、Websphere、weblogic</li><li>Web开发：Struts、Spring、myBatis</li><li>开发工具：Eclipse、Idea、Netbean、Intellij</li><li>2006年基于java分布式管理出现了Hadoop-大数据领域</li><li>2008年Android的发展和流行</li></ul><h1 id="Java的特性和优势"><a href="#Java的特性和优势" class="headerlink" title="Java的特性和优势"></a>Java的特性和优势</h1><ul><li>简单性</li><li>面向对象</li><li>可移植性</li><li>高性能</li><li>分布式</li><li>动态性——反射机制</li><li>多线程</li><li>安全性</li><li>健壮性</li></ul><h1 id="Java成功的原因"><a href="#Java成功的原因" class="headerlink" title="Java成功的原因"></a>Java成功的原因</h1><p>顺应时代的发展，贴合了互联网时代来临的需求，自身足够优秀</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java程序运行机制</title>
    <link href="/2022/05/14/Java%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/05/14/Java%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java的程序运行机制"><a href="#Java的程序运行机制" class="headerlink" title="Java的程序运行机制"></a>Java的程序运行机制</h1><p><em><strong>Java既是编译型也是解释型</strong></em></p><p><strong>Java程序运行流程</strong></p><p><strong>java源文件—&gt;java编译器—&gt;编译—&gt;class字节码文件—&gt;<br>JRE-java虚拟机(类加载器–&gt;字节码校验器–&gt;解释器)—&gt;操作系统进行指令操作</strong></p><ol><li><p>编译型</p><p>效率高，反应速度快</p><p>example：操作系统</p></li><li><p>解释型</p><p>对速度要求不高</p><p>example：网页</p></li></ol><p>举个例子</p><p>一个外国人想要看一本中文书，他可以直接购买一本全本都翻译成英文的——编译型</p><p>他也可以请一位翻译人员逐字逐句的给他翻译过来看——解释型</p><p>但是一但原来中文的原本有改动，译本就要重新翻译，而后者就可以灵活改动</p><blockquote><p>随着硬件的发展，解释型和编译型的效率越来越接近</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
