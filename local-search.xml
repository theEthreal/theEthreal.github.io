<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>js入门</title>
    <link href="/2022/06/11/post_img/js%E5%85%A5%E9%97%A8/"/>
    <url>/2022/06/11/post_img/js%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h2><h3 id="JavaScript-基本变量"><a href="#JavaScript-基本变量" class="headerlink" title="JavaScript 基本变量"></a>JavaScript 基本变量</h3><p><strong>JS代码引入:</strong> 在body标签的区域内直接使用方式来引用代码,或者是在head头部也可以直接引用.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery-3.4.1.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/jquery-3.4.1.min.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.4.1.min.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello lyshark&quot;</span>) </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>定义局部变量:</strong> 如下函数内局部变量必须以var开头,如果在函数内未使用var,系统默认也是定义局部变量.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            names = <span class="hljs-string">&quot;lyshark&quot;</span>;     <span class="hljs-comment">// 函数内部默认转成局部变量</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> age = <span class="hljs-number">21</span>;          <span class="hljs-comment">// 定义局部变量标准写法</span></span><br><span class="language-javascript">            gender = <span class="hljs-string">&quot;Man&quot;</span>;        <span class="hljs-comment">// 默认局部变量</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;姓名:&quot;</span> + names);</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;年龄:&quot;</span> + age);</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;性别:&quot;</span> + gender);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">func</span>()                     <span class="hljs-comment">// 调用函数,不掉用则不执行</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>定义全局变量:</strong> 如果我们想要定义全局变量,只需要在函数体外部定义,解释器默认将外部变量当成全局变量.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> func_names = <span class="hljs-string">&quot;lyshark&quot;</span>     <span class="hljs-comment">// 定义全局变量</span></span><br><span class="language-javascript">            func_novar = <span class="hljs-string">&quot;hello&quot;</span>       <span class="hljs-comment">// 定义全局变量</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>) </span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;打印全局变量:&quot;</span> + func_names)</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;打印全局变量:&quot;</span> + func_novar)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">func</span>()                         <span class="hljs-comment">// 调用函数</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/LyShark/p/15346588.html#_labelTop">回到顶部</a></p><h3 id="JavaScript-数值类型"><a href="#JavaScript-数值类型" class="headerlink" title="JavaScript 数值类型"></a>JavaScript 数值类型</h3><p><strong>整数变量:</strong> 使用显式方式声明三个变量,<code>num1=1024</code>,<code>num2=5E2</code>,<code>num3=1.23e-3</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> num1 = <span class="hljs-number">1024</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> num2 = <span class="hljs-number">0x1A</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> num3 = <span class="hljs-number">10</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> num4 = <span class="hljs-number">20</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;两个数相加:&quot;</span> + (num3 + num4 ))</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>浮点数变量:</strong> 分别声明四个浮点数变量,其中表示方式可以有以下四种形式.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> num1 = <span class="hljs-number">3.5659</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> num2 = -<span class="hljs-number">8.1E12</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> num3 = <span class="hljs-number">.1e12</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> num4 = <span class="hljs-number">32E-12</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;输出一个浮点数:&quot;</span> + num2)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>特殊的数值:</strong> 除了上面的数值表示类型外,JS默认定义了一些常量用来表示更多的类型值.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;表示无穷大的特殊值:&quot;</span> + <span class="hljs-title class_">Infinity</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;特殊的非数字值:&quot;</span> + <span class="hljs-title class_">NaN</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;表示最大值:&quot;</span> + <span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;表示最小值:&quot;</span> + <span class="hljs-title class_">Number</span>.<span class="hljs-property">MIN_VALUE</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;特殊的非数字值:&quot;</span> + <span class="hljs-title class_">Number</span>.<span class="hljs-property">NaN</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;表示正无穷大的特殊值:&quot;</span> + <span class="hljs-title class_">Number</span>.<span class="hljs-property">POSITIVE_INFINITY</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;表示负无穷大的特殊值:&quot;</span> + <span class="hljs-title class_">Number</span>.<span class="hljs-property">NEGATIVE_INFINITY</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>数字转换:</strong> <code>parseInt(..)</code>方法,可以实现将一个字符串转换成整数,如果不成功则返回NaN.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        str = <span class="hljs-string">&quot;1024&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> str)    <span class="hljs-comment">//输出字符串格式</span></span></span><br><span class="language-javascript"><span class="language-xml">        num = <span class="hljs-built_in">parseInt</span>(str)        <span class="hljs-comment">//将字符串转成数值,赋值给num</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)           <span class="hljs-comment">//打印这个数值</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>转浮点数转换:</strong> <code>parseFloat(..)</code>方法,可以实现将一个字符串转换成浮点数,如果不成功则返回NaN.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        str = <span class="hljs-string">&quot;1024&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> str)    <span class="hljs-comment">//输出字符串格式</span></span></span><br><span class="language-javascript"><span class="language-xml">        num = <span class="hljs-built_in">parseFloat</span>(str)      <span class="hljs-comment">//将字符串转成浮点数,赋值给num</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)           <span class="hljs-comment">//打印这个数值</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>常用数值函数:</strong> 这里举三个例子,分别代表判断有限值,保留小数点,和保留小数点后几位.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> num1 = <span class="hljs-number">1024</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> num2 = <span class="hljs-number">3.16159</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> num3 = <span class="hljs-number">100</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;判断是否为有限值: &quot;</span> + <span class="hljs-built_in">isFinite</span>(num1) + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;指定要保留的小数点位数: &quot;</span> + num2.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>) + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;保留小数点后2位: &quot;</span> + num3.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>))</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>基本类型转换:</strong> 基本类型转换<code>String:将字数字转成字符串</code>,<code>Number:将其他类型转为整数</code>,<code>Boolean:其他类型转成布尔类型</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        document.write(&quot;其他类型转换为字符串: &quot; + String(1024) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;其他类型转换为数值:&quot; + Number(&quot;hello&quot;) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;其他类型转换为布尔:&quot; + Boolean(1) + &quot;&lt;br&gt;&quot;);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>字符串转成整数:</strong> 字符串之间的数据转换,与进制转换实例.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        document.write(&quot;将a转换成整数: &quot; + parseInt(&quot;a&quot;) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;将a转换成8进制,整数: &quot; + parseInt(&quot;a&quot;,8) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;将a转换成2进制,整数: &quot; + parseInt(&quot;a&quot;,2) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;将a转换成浮点数: &quot; + parseFloat(&quot;a&quot;) + &quot;&lt;br&gt;&quot;);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>数学计算:</strong> Math主要用于对数值进行科学计算,这里只展示基本的.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        // console.dir(Math);<br>        document.write(&quot;取出PI: &quot; +  Math.PI + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;获取绝对值: &quot; +  Math.abs(-12.5) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;获取绝对值: &quot; +  Math.abs(-12.5) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;向上取整数: &quot; +  Math.ceil(-12.5) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;向下取整数: &quot; +  Math.floor(-12.5) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;四舍五入: &quot; +  Math.round(22.5) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;返回最大: &quot; +  Math.max(1,6,7,9,3,2) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;返回最小: &quot; +  Math.min(1,6,7,9,3,2) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;开平方: &quot; +  Math.sqrt(18) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;计算字串: &quot; + eval(&quot;11+22&quot;) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;取随机数: &quot; + Math.random() + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;获取1,10之间随机数: &quot; + Math.round(Math.random()*(10-1)+1)+ &quot;&lt;br&gt;&quot;);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/LyShark/p/15346588.html#_labelTop">回到顶部</a></p><h3 id="JavaScript-字符串型"><a href="#JavaScript-字符串型" class="headerlink" title="JavaScript 字符串型"></a>JavaScript 字符串型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">obj.<span class="hljs-property">length</span>                           获取字符串长度<br>obj.<span class="hljs-title function_">toString</span>()                       将数组转换成字串<br>obj.<span class="hljs-title function_">trim</span>()                           移除字符串中空白<br>obj.<span class="hljs-title function_">trimLeft</span>()                       移除字符串中左边空白<br>obj.<span class="hljs-title function_">trimRight</span>()                      移除字符串中右边空白<br>obj.<span class="hljs-title function_">charAt</span>(n)                        返回字符串中的第n个字符<br>obj.<span class="hljs-title function_">concat</span>(value, ...)               两个或者多个字符串拼接<br><br>obj.<span class="hljs-title function_">indexOf</span>(substring,start)         返回指定字符串在字符串中首次出现的位置<br>obj.<span class="hljs-title function_">lastIndexOf</span>(substring,start)     返回该元素在字符串中最后一次出现的位置<br>obj.<span class="hljs-title function_">substring</span>(<span class="hljs-keyword">from</span>,to)               提取字符串中介于两个指定下标之间的字符<br><br>obj.<span class="hljs-title function_">slice</span>(start,end)                 从已有字符串数组中返回选定的元素,切片<br>obj.<span class="hljs-title function_">split</span>(delimiter,limit)           用于把一个字符串分割成字符串数组,分割<br>obj.<span class="hljs-title function_">toLowerCase</span>()                    将小写字符串转换成大写<br>obj.<span class="hljs-title function_">toUpperCase</span>()                    将大写字符串转换成小写<br><br>obj.<span class="hljs-title function_">search</span>(regexp)                   从头开始匹配,返回匹配成功的第一个字符串位置,g无效<br>obj.<span class="hljs-title function_">match</span>(regexp)                    全局搜索,如果正则中有g表示找到全部,否则只找到第一个<br>obj.<span class="hljs-title function_">replace</span>(regexp,replacement)      正则替换,正则中有g则替换所有,否则只替换第一个匹配项<br>                                     $数字：匹配的第n个组内容<br>                                     $&amp;：当前匹配的内容<br>                                     $<span class="hljs-string">`：位于匹配子串左侧的文本</span><br><span class="hljs-string">                                     $&#x27;：位于匹配子串右侧的文本</span><br><span class="hljs-string">                                     $$：直接量$符号</span><br></code></pre></td></tr></table></figure><p><strong>统计字串长度:</strong> 使用<code>length</code>方法获取字符串的长度,并返回,可以直接返回,也可以赋值给变量.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> string = <span class="hljs-string">&quot; hello lyshark 欢迎来到中国!&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> num = string.<span class="hljs-property">length</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;统计字符串长度: &quot;</span> + string.<span class="hljs-property">length</span> + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;另一种统计长度的方法: &quot;</span> + num)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>移除字串空格:</strong> 通过使用<code>trim()</code>移除字符串两边空格,<code>trimLeft(),trimRight()</code>可以分别移除左边和右边空格.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var obj = &quot;    lyshark     &quot;;<br>        <br>        document.write(&quot;统计字符串大小: &quot; + obj.length + &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;去除两边的空格: &quot; + obj.trim() + &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;统计字符串大小: &quot; + obj.length + &quot;&lt;br&gt;&quot;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>字符串拼接:</strong> 使用<code>concat(,)</code>将两个或者多个字符串拼接在一起形成一个新的字符串.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> string1 = <span class="hljs-string">&quot;hello &quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> string2 = <span class="hljs-string">&quot;lyshark&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> string3 = <span class="hljs-string">&quot;welcome&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;拼接一个字串: &quot;</span> + string1.<span class="hljs-title function_">concat</span>(string2) + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;拼接多个字串: &quot;</span> + string1.<span class="hljs-title function_">concat</span>(string2,string3) + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>字符串提取:</strong> 使用<code>indexOf</code>定位首次出现的位置,<code>lastIndexOf</code>定位最后出现的位置,<code>substring</code>实现提取任意字符串.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Hello World!&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;Hello 首次出现的位置: &quot;</span> + str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Hello&quot;</span>) +  <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;World 首次出现的位置: &quot;</span> + str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;World&quot;</span>) +  <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;如果没有出现过默认-1: &quot;</span> + str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;world&quot;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Hello World! Hello lyshark!&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;Hello 最后出现的位置: &quot;</span> + str.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;Hello&quot;</span>) +  <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;World 最后出现的位置: &quot;</span> + str.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;World&quot;</span>) +  <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;如果没有出现过默认-1: &quot;</span> + str.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;world&quot;</span>))</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><br>&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var str = &quot;Hello World!&quot;;<br>        document.write(&quot;从0偏移取数据,向后取5个: &quot; + str.substring(0,5) +  &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;从0偏移取数据,向后取11个: &quot; + str.substring(0,11) + &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;从3偏移取数据,向后取7个: &quot; + str.substring(3,7))<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>切片与分割:</strong> 通过使用<code>slice()</code>方法切割数组,<code>split()</code>方法用来切割字符串转换成数组.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var array = new Array(5)<br>        array[0] = &quot;LyShark&quot;;<br>        array[1] = &quot;Admin&quot;;<br>        array[2] = &quot;John&quot;;<br>        array[3] = &quot;Adrew&quot;;<br><br>        document.write(&quot;返回整个数组: &quot; + array +  &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;返回[1]-[2]元素: &quot; + array.slice(1,3) +  &quot;&lt;br&gt;&quot;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var str = &quot;hello world my names lyshark !&quot;;<br>        var test = &quot;a:b:c:d:e:f:g:h&quot;<br><br>        document.write(&quot;以空格作为分隔符分割字串: &quot; + str.split(&quot; &quot;) +  &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;将每个字母单独变成一个数组: &quot; + str.split(&quot;&quot;) +  &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;以空格分隔,只分割前三个单词: &quot; + str.split(&quot; &quot;,3) +  &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;以冒号作为分隔符,分割元素: &quot; + test.split(&quot;:&quot;))<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>字符串查找:</strong> 查找字符串并返回所在位置,<code>search() 和 match()</code>方法作用基本一致,查找时支持正则匹配.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var string = &quot;hello world my names lyshark my world !&quot;;<br><br>        document.write(&quot;精确查找字符串: &quot; + string.search(&quot;lyshark&quot;) +  &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;精确检索字符串: &quot; + string.search(/my/) +  &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;忽略大小写检索: &quot; + string.search(/world/i) +  &quot;&lt;br&gt;&quot;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br><br>&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var string = &quot;hello world my names lyshark my world  123 456 !&quot;;<br><br>        document.write(&quot;精确查找字符串: &quot; + string.match(&quot;lyshark&quot;) +  &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;全局匹配\d数字: &quot; + string.match(/\d+/g) +  &quot;&lt;br&gt;&quot;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>字符串替换:</strong> 查找并替换字符串,可以使用<code>replace()</code>方法,该方法也支持正则表达式.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var string = &quot;hello world welcome to lyshark.com hello lyshark HELLO lyshark!&quot;;<br><br>        document.write(&quot;查找welcome替换成xxxx: &quot; + string.replace(/welcome/,&quot;xxxx&quot;) +  &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;全局查找替换hello并替换: &quot; + string.replace(/hello/g,&quot;oooo&quot;) +  &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;匹配替换并区分大小写: &quot; + string.replace(/HELLO/,&quot;gggg&quot;) +  &quot;&lt;br&gt;&quot;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>字符串与数组互转:</strong> 将指定字符串转换为数组,或者将数组转换为指定字符串.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;posted @ 2020-01-01 08:00 lyshark 阅读 (23) 评论 (0)&#x27;</span>;<br><br><span class="hljs-keyword">var</span> ary  = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>);    <span class="hljs-comment">// 字符串转数组</span><br><span class="hljs-keyword">var</span> new_str = ary.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot; &quot;</span>)   <span class="hljs-comment">// 数组转字符串</span><br><br><span class="hljs-keyword">var</span> divArr =$(<span class="hljs-string">&#x27;.day .postDesc&#x27;</span>);<br>$.<span class="hljs-title function_">each</span>(divArr,<span class="hljs-keyword">function</span>(<span class="hljs-params">i,n</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n.<span class="hljs-property">innerText</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>时间字符串处理:</strong> 将指定的时间字符串格式差分或组合成任意格式的时间显示.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> time;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 方法一：输出为 2020年08月05 12时22分11秒</span></span></span><br><span class="language-javascript"><span class="language-xml">        time = <span class="hljs-string">&quot;2020-08-05 12:22:11&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        time = time.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;年&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;月&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;日&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;时&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;分&#x27;</span>) + <span class="hljs-string">&#x27;秒&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;日期转换: &quot;</span> + time + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 方法二：输出为 2020/08/05</span></span></span><br><span class="language-javascript"><span class="language-xml">        time = <span class="hljs-string">&quot;2020-08-05 12:22:11&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> n = time.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;-&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> m = time.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;-&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> x = time.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27; &#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> year = time.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>,n);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> month = time.<span class="hljs-title function_">substring</span>(n+<span class="hljs-number">1</span>,m);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> day = time.<span class="hljs-title function_">substring</span>(m+<span class="hljs-number">1</span>,x);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;日期: &quot;</span> + year + <span class="hljs-string">&quot;/&quot;</span> + month + <span class="hljs-string">&quot;/&quot;</span> + day + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 拆分日期</span></span></span><br><span class="language-javascript"><span class="language-xml">        time = <span class="hljs-string">&quot;2020-08-05 12:22:11&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> data = time.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        m = data[<span class="hljs-number">0</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        x = data[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;日期: &quot;</span> + m + <span class="hljs-string">&quot;时间: &quot;</span> + x);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 正则拆分,addZero不足两位自动补齐0</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> <span class="hljs-title function_">addZero</span> = val =&gt; val.<span class="hljs-property">length</span> &lt; <span class="hljs-number">2</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-attr">val</span>:val;</span></span><br><span class="language-javascript"><span class="language-xml">        time = <span class="hljs-string">&quot;2020-08-05 12:22:11&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> array = time.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/(?: |-|:)/g</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;  &quot;</span> + <span class="hljs-title function_">addZero</span>(array[<span class="hljs-number">1</span>]));</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>处理字符串路径:</strong> 实现将一个字符串URL路径,拆分为一个键值对类型的数据类型.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> url = <span class="hljs-string">&quot;https://baidu.com/index.php?id=1&amp;name=lyshark&amp;pid=1023&amp;teacher=admin#1E2c&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> result = &#123;&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> askIndex = url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> wellIndex = url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;#&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> askText = url.<span class="hljs-title function_">substring</span>(askIndex+<span class="hljs-number">1</span>,wellIndex);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> wellText = url.<span class="hljs-title function_">substring</span>(wellIndex+<span class="hljs-number">1</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;得到字符串: &quot;</span> + askText);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> askArray = askText.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;得到字符串数组: &quot;</span> + askArray);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 得到 key=value 结构</span></span></span><br><span class="language-javascript"><span class="language-xml">        askArray.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">let</span> n = item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">let</span> key = n[<span class="hljs-number">0</span>];</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">let</span> value = n[<span class="hljs-number">1</span>];</span></span><br><span class="language-javascript"><span class="language-xml">            result[key] = value;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(key + <span class="hljs-string">&quot; : &quot;</span> + value + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        result[<span class="hljs-string">&#x27;Hash&#x27;</span>] = wellText;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>日期时间字符串:</strong> 获取本机的日期和时间,并且将其转换为我们想要的格式.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        function addZero(val)<br>        &#123;<br>            val = Number(val);<br>            return val &lt; 10 ? &#x27;0&#x27; + val : val;<br>        &#125;<br><br>        var now = new Date();<br>        let year = now.getFullYear(),month = now.getMonth()+1,day = now.getDate(),<br>        week = now.getDay(),hours = now.getHours(),minutes = now.getMinutes(),seconds = now.getSeconds();<br><br>        let weekArray = [&#x27;日&#x27;,&#x27;一&#x27;,&#x27;二&#x27;,&#x27;三&#x27;,&#x27;四&#x27;,&#x27;五&#x27;,&#x27;六&#x27;];<br>        let result = year + &quot;年&quot; + month + &quot;月&quot; + day + &quot;日&quot;;<br><br>        result += &quot; 星期&quot; + weekArray[week] + &quot; &quot;;<br>        document.write(&quot;当前日期: &quot; + result + &quot;&lt;br&gt;&quot;);<br><br>        let result_time = &quot; &quot; + addZero(hours) + &quot;:&quot; + addZero(minutes) + &quot;:&quot; + addZero(seconds);<br>        document.write(&quot;当前时间: &quot; + result_time + &quot;&lt;br&gt;&quot;);<br><br>        document.write(&quot;采用UTC时区表示: &quot; + now.toUTCString(now.getTime()) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;采用本地时区表示: &quot; + now.toLocaleString(now.getTime()) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;采用本地时区表示日期: &quot; + now.toDateString(now.getTime()) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;采用本地中国标准时间: &quot; + now.toTimeString(now.getTime()) + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;采用本地时区表示2019/02/21: &quot; + now.toLocaleDateString(now.getTime()) +&quot;&lt;br&gt;&quot;);<br>        document.write(&quot;采用本地时区表示4:01:55 : &quot; + now.toLocaleTimeString(now.getTime()) +&quot;&lt;br&gt;&quot;);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>日期对象处理字符串:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 字符串补全函数</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">addZero</span>(<span class="hljs-params">val</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            val = <span class="hljs-title class_">Number</span>(val);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> val &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + val : val;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 字符串格式化函数</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">formatTime</span>(<span class="hljs-params">time</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// let array = time.split(/(?: |-|:)/g);</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">let</span> array = time.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">let</span> array_left = array[<span class="hljs-number">0</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">let</span> array_right = array[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">let</span> new_array = array_left.<span class="hljs-title function_">concat</span>(array_right);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> new_array;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> time = <span class="hljs-string">&quot;2020-07-22 11:12:54&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> result = <span class="hljs-title function_">formatTime</span>(time);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;拆分年份: &quot;</span> + result[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>封装模板字符串:</strong> 通过传递模板,实现对时间日期的自定义转换.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 封装字符串格式化方法</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">formatTime</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">formatTime</span>(<span class="hljs-params">template</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">typeof</span> template === <span class="hljs-string">&#x27;undefined&#x27;</span>? template=<span class="hljs-string">&quot;&#123;0&#125;年&#123;1&#125;月&#123;2&#125;日 &#123;3&#125;:&#123;4&#125;:&#123;5&#125;&quot;</span>:<span class="hljs-literal">null</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">let</span> array = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\d+/g</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 模板和数据渲染</span></span></span><br><span class="language-javascript"><span class="language-xml">            template = template.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\&#123;(\d+)\&#125;/g</span>,<span class="hljs-function">(<span class="hljs-params">x,y</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">let</span> val = array[y] || <span class="hljs-string">&#x27;00&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                val.<span class="hljs-property">length</span> &lt; <span class="hljs-number">2</span> ? val=<span class="hljs-string">&#x27;0&#x27;</span>+<span class="hljs-attr">val</span>: <span class="hljs-literal">null</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">return</span> val;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> template;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> time = <span class="hljs-string">&quot;2020-08-22 12:22:11&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(time.<span class="hljs-title function_">formatTime</span>());</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(time.<span class="hljs-title function_">formatTime</span>(<span class="hljs-string">&quot;&#123;0&#125;年/&#123;1&#125;月&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>URL字符串转义:</strong> 返回一个对URI字符串编码后的结果,URI表示的范围比URL要大.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var urlstr = encodeURI(&quot;http://www.lyshark.com/index.html country=中国&quot;)<br>        document.write(&quot;URI转义字符: &quot; + urlstr + &quot;&lt;br&gt;&quot;)<br><br>        var urlstr = encodeURIComponent(&quot;http://www.lyshark.com/index.html country=中国&quot;)<br>        document.write(&quot;转义URI组件: &quot; + urlstr + &quot;&lt;br&gt;&quot;)<br><br>        var urlde = decodeURI(&quot;http://www.lyshark.com/index.html%20country=%E4%B8%AD%E5%9B%BD&quot;)<br>        document.write(&quot;URI解码: &quot; + urlde + &quot;&lt;br&gt;&quot;)<br><br>        var urlde = decodeURIComponent(&quot;%2Findex.html%20country%3D%E4%B8%AD%E5%9B%BD&quot;)<br>        document.write(&quot;URI组件解码: &quot; + urlde)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>字符串转换:</strong> 使用<code>escape()</code>方法对字符串进行转义处理,<code>unescape()</code>则负责将代码解码.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> encode = <span class="hljs-built_in">escape</span>(<span class="hljs-string">&quot;中国&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;字符串转换: &quot;</span> + encode + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> decode = <span class="hljs-built_in">unescape</span>(<span class="hljs-string">&quot;%u4E2D%u56FD&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;字符串解码: &quot;</span> + decode)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>字符串序列化:</strong> 使用JSON方法将数组序列化存储,方便数据传输.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]</span></span><br><span class="language-javascript"><span class="language-xml">        ret = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(array)    <span class="hljs-comment">//序列化,将其他类型转换成字符串</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;序列化后的类型: &quot;</span> + <span class="hljs-title function_">typeof</span>(ret) + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;反序列化,加载结果: &quot;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(ret) + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;lyshark&quot;</span>&#125;;</span></span><br><span class="language-javascript"><span class="language-xml">        ret = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;反序列化: &quot;</span> + ret)</span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> obj1 = &#123;<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">22</span>&#125;,obj2 = &#123;<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">33</span>&#125;;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> obj_array = [];</span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">        obj_array.<span class="hljs-title function_">push</span>(obj1);</span></span><br><span class="language-javascript"><span class="language-xml">        obj_array.<span class="hljs-title function_">push</span>(obj2);</span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj_array);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>正则匹配字符串:</strong> 一些常用的正则匹配函数,正则表达式是通用的.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br><br>        var string = &quot;hello123world567mynames;&quot;<br>        document.write(&quot;Match全局匹配: &quot; + string.match(/\d+/g)  + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;Search取出第一个结果的索引值: &quot; + string.search(/\d+/g)  + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;Split取出第一个结果的索引值: &quot; + string.split(/\d+/g)  + &quot;&lt;br&gt;&quot;);<br><br>        var reg = RegExp(&quot;\d+&quot;,g);<br>        document.write(&quot;测试字符是否存在: &quot; + reg.test(&quot;names123123lyshark456,789&quot;)  + &quot;&lt;br&gt;&quot;);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/LyShark/p/15346588.html#_labelTop">回到顶部</a></p><h3 id="JavaScript-数组类型"><a href="#JavaScript-数组类型" class="headerlink" title="JavaScript 数组类型"></a>JavaScript 数组类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">obj.<span class="hljs-property">length</span>                           获取数组的大小<br>obj.<span class="hljs-title function_">push</span>(ele)                        给数组尾部追加元素<br>obj.<span class="hljs-title function_">pop</span>()                            从尾部获取一个元素<br>obj.<span class="hljs-title function_">unshift</span>(ele)                     在数组头部插入元素<br>obj.<span class="hljs-title function_">shift</span>(ele)                       在数组头部移除元素<br><br>obj.<span class="hljs-title function_">slice</span>()                          数组元素的切片<br>obj.<span class="hljs-title function_">concat</span>(val,..)                   多个数组相连接<br>obj.<span class="hljs-title function_">join</span>(sep)                        将数组连接起来变成字符串<br>obj.<span class="hljs-title function_">sort</span>()                           对数组元素进行排序<br>obj.<span class="hljs-title function_">reverse</span>()                        反转数组中的元素<br><br>obj.<span class="hljs-title function_">splice</span>(n,<span class="hljs-number">0</span>,val)                  在数组指定位置插入元素<br>obj.<span class="hljs-title function_">splice</span>(n,<span class="hljs-number">1</span>,val)                  在数组指定位置替换元素<br>obj.<span class="hljs-title function_">splice</span>(n,<span class="hljs-number">1</span>)                      在数组指定位置删除元素     <br></code></pre></td></tr></table></figure><p><strong>定义一维数组:</strong> 以下案例定义了3个数组,并且分别给数组赋值,然后打印结果.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var array = [1,2,3,4,5];        //创建数组,并有5个元素<br>        var array1 = [];                //创建空数组<br>        var array2 = new Array()        //同样创建空数组<br>        array1[0] = &quot;hello&quot;;<br><br>        document.write(&quot;数组array大小: &quot; + array.length + &quot;&lt;br&gt;&quot;);<br>        <br>        for(let i=0;i&lt;array.length;i++)<br>        &#123;<br>            document.write(array[i] + &quot;&lt;br&gt;&quot;);<br>        &#125;<br><br>        array.forEach((item,index) =&gt; &#123;console.log(item,index)&#125;);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>定义二维数组:</strong> 以下案例定义了3个数组,并且分别给数组赋值,然后通过循环语句打印数组值.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var value = [[1,2,3],[4,5,6],[7,8,9,10]];                          //创建二维数组<br><br>        document.write(&quot;数组value大小: &quot; + value.length + &quot;&lt;br&gt;&quot;)          //打印数组大小<br>        document.write(&quot;数组value[2]大小: &quot; + value[2].length + &quot;&lt;br&gt;&quot;)    //打印数组大小<br>        <br>        for(var i=0;i&lt;3;i++)          //循环输出数组元素<br>        &#123;<br>            for(j in value[i])        //输出每个数组元素的值<br>            &#123;<br>                document.write(&quot; &quot; + value[i][j]);<br>            &#125;<br>            document.write(&quot;&lt;br&gt;&quot;)<br>        &#125;<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>数组嵌套字典:</strong> 在数组中嵌套字典,并通过遍历得到字典中的每个值.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> person = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;lyshark&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">age</span>: <span class="hljs-number">22</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;姓名: &quot;</span> + person[<span class="hljs-string">&#x27;name&#x27;</span>] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        person.<span class="hljs-property">age</span> = <span class="hljs-number">100</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;年龄: &quot;</span> + person.<span class="hljs-property">age</span> + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> array = [];</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> var1 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">22</span>&#125;;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">let</span> var2 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;lyshark&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">33</span>&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        array.<span class="hljs-title function_">push</span>(var1);</span></span><br><span class="language-javascript"><span class="language-xml">        array.<span class="hljs-title function_">push</span>(var2);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数组中的字典: &quot;</span> + array);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        array.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;遍历姓名: &quot;</span> + item[<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;遍历年龄: &quot;</span> + item[<span class="hljs-string">&#x27;age&#x27;</span>]);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>PUSH&#x2F;POP 结尾插入删除:</strong> 通过该命令可实现在数组结尾追加新元素,也可从结尾删除元素.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var list = [1,2,3,4,5];<br><br>        document.write(&quot;数组元素: &quot; + list + &quot;  总大小:&quot; + list.length + &quot;&lt;br&gt;&quot;)<br>        list.push(6)<br>        list.push(7)     //在结尾添加新元素<br>        document.write(&quot;数组元素: &quot; + list + &quot;  总大小:&quot; + list.length + &quot;&lt;br&gt;&quot;)<br>        list.pop()<br>        list.pop()     //在结尾删除元素<br>        document.write(&quot;数组元素: &quot; + list + &quot;  总大小:&quot; + list.length + &quot;&lt;br&gt;&quot;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>Shift&#x2F;Unshift 开头插入删除:</strong> 该命令可以实现在数组元素的头部添加元素,或者是删除头部的元素.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var list = [4,5,6];<br><br>        document.write(&quot;数组元素: &quot; + list + &quot;  总大小:&quot; + list.length + &quot;&lt;br&gt;&quot;)<br>        list.unshift(3)<br>        list.unshift(2)<br>        list.unshift(1)     //在开头添加元素<br>        document.write(&quot;数组元素: &quot; + list + &quot;  总大小:&quot; + list.length + &quot;&lt;br&gt;&quot;)<br>        list.shift()<br>        list.shift()       //从开头删除一个元素<br>        document.write(&quot;数组元素: &quot; + list + &quot;  总大小:&quot; + list.length + &quot;&lt;br&gt;&quot;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>Splice 替换数组元素:</strong> 通过使用<code>splice()</code>方法,实现对元素的各种替换操作.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var array = new Array(5)<br>        array[0] = &quot;admin&quot;;<br>        array[1] = &quot;guest&quot;;<br>        array[2] = &quot;lyshark&quot;;<br>        array[3] = &quot;wall&quot;;<br>        <br>        document.write(&quot;当前列表: &quot; + array + &quot;&lt;br&gt;&quot;)<br><br>        array.splice(2,1,&quot;替换成我&quot;)                    //把第2个元素替换,替换1次<br>        document.write(&quot;替换列表: &quot; + array + &quot;&lt;br&gt;&quot;)<br><br>        let ary = [10,20,30,40,50];<br>        let res = ary.splice(1,2,&#x27;aaa&#x27;,&#x27;bbb&#x27;)          //针对多个元素的一次性替换<br>        document.write(&quot;数组替换后: &quot; + ary + &quot;&lt;br&gt;&quot;)<br><br>        array.splice(5,1,&quot;插入新元素&quot;)                  //在第5个位置上插入新元素<br>        document.write(&quot;插入列表: &quot; + array + &quot;&lt;br&gt;&quot;)<br><br>        array.splice(1,3,&quot;删除元素&quot;)                   //删除第2个位置以后2个元素<br>        document.write(&quot;删除列表: &quot; + array + &quot;&lt;br&gt;&quot;)<br>        <br>        array.splice(array.length,0,&quot;aaa&quot;)             //向数组末尾追加aaa<br>        document.write(&quot;开头追加元素: &quot; + array + &quot;&lt;br&gt;&quot;)<br><br>        array.splice(0,0,&quot;bbb&quot;)                        //向数组开头追加bbb<br>        document.write(&quot;末尾追加元素: &quot; + array + &quot;&lt;br&gt;&quot;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>slice 切片与克隆:</strong> 使用<code>slice()</code>方法实现数组的切片与克隆,原数组不受影响.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var array = [1,2,3,4,5,6,7,8,9];<br><br>        document.write(&quot;数组切片(从1号索引开始显示元素): &quot; + array.slice(1) + &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;数组切片(从3号索引开始显示元素): &quot; + array.slice(3) + &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;数组切片(只显示1-2号元素切片): &quot; + array.slice(1,3) + &quot;&lt;br&gt;&quot;)<br><br>        var res = new Array();<br>        res = array.slice(0);<br>        document.write(&quot;浅克隆数组到res: &quot; + res + &quot;&lt;br&gt;&quot;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>join 指定分隔符:</strong> 转换字符串与分隔符分割.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        let ary1 = [1,2,3,4,5];<br>        let ary2 = [6,7,8,9,10];<br>        let res = ary1.concat(&#x27;0&#x27;,ary2);<br>        document.write(&quot;数组res: &quot; + res + &quot;&lt;br&gt;&quot;)<br><br>        let str_ary = res.toString();<br>        document.write(&quot;转为字符串: &quot; + str_ary + &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;转换字符串: &quot; + [3].toString() + &quot;&lt;br&gt;&quot;)<br><br>        let res2 = ary2.join(&quot;+&quot;);<br>        document.write(&quot;指定分隔符: &quot; + res2 + &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;ary2数组求和: &quot; + eval(res2) + &quot;&lt;br&gt;&quot;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>IndexOf 验证数组:</strong> 检测数组中是否包含某一项值.检测当前项在数组中第一次或最后一次出现位置索引值.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        let ary1 = [1,2,3,4,5,1,2,3];<br>        document.write(&quot;第一次出现索引: &quot; + ary1.indexOf(2) + &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;最后出现的索引: &quot; + ary1.lastIndexOf(4) + &quot;&lt;br&gt;&quot;)<br>    <br>        if(ary1.indexOf(3)&gt;=0)<br>        &#123;<br>            document.write(&quot;包含有3这个元素 &lt;br&gt;&quot;)<br>            document.write(&quot;includes验证: &quot; + ary1.includes(3) + &quot;&lt;br&gt;&quot;)<br>        &#125;<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>Sort 数组排序:</strong> 使用<code>sort()</code>方法实现数组的正向排列,<code>reverse()</code>则实现数组的反向排列.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var array = [12,65,77,89,32,-19,54,33,78]<br>        document.write(&quot;正向排序: &quot; + array.sort() + &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;反向排序: &quot; + array.reverse() + &quot;&lt;br&gt;&quot;)<br><br>        let ary = [7,5,33,88,90,32,5,4,6]<br>        ary.sort(function(a,b) &#123;<br>            document.write(a + &quot; &quot; + b + &quot;&lt;br&gt;&quot;)<br>            return a-b;  // 升序<br>            // return b-a; // 降序<br>        &#125;)        <br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>实现数组去重:</strong> 分别提供了多种方法,实现对特定数组中的数值进行去重,只保留一份.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var array = [1,2,3,4,5,1,2,3,6,7,8,9,3,2,6,87,9,0,5,4];<br>        var new_array = [];<br><br>        // 方法1<br>        for(let x=0;x&lt;array.length;x++)<br>        &#123;<br>            let item = array[x];<br>            // 验证新数组中是否存在重复值<br>            if(new_array.includes(item) == 0)<br>            &#123;<br>                new_array.push(item);<br>            &#125;<br>        &#125;<br>        document.write(&quot;数组大小: &quot; + array.length + &quot;&lt;br&gt;&quot;)<br>        document.write(&quot;原数组: &quot; + array + &quot;&lt;br&gt;&quot;);<br>        document.write(&quot;新数组: &quot; + new_array + &quot;&lt;br&gt;&lt;br&gt;&quot;);<br><br>        // 方法2<br>        new_array = []<br>        array.forEach(item =&gt; &#123;<br>            if(new_array.includes(item)) return;<br>            new_array.push(item);<br>        &#125;);<br>        document.write(&quot;新数组: &quot; + new_array + &quot;&lt;br&gt;&lt;br&gt;&quot;);<br><br>        // 方法3,在原数组中去重<br>        for(var x=0; x&lt;array.length; x++)<br>        &#123;<br>            var item = array[x];<br>            // 用当前项分别和后面的每一项作比较<br>            for(var y=x+1; y&lt;array.length; y++)<br>            &#123;<br>                var compare = array[y];<br>                if(compare == item)<br>                &#123; // 如果找到相等的则直接在原数组中删除<br>                    array.splice(y,1);<br>                    y--;<br>                &#125;<br>            &#125;<br>        &#125;<br>        document.write(&quot;原数组操作: &quot; + array + &quot;&lt;br&gt;&quot;);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>高效数组去重:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">array</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">let</span> obj = &#123;&#125;;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> x=<span class="hljs-number">0</span>; x&lt;array.<span class="hljs-property">length</span>; x++)</span></span><br><span class="language-javascript"><span class="language-xml">            &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">let</span> item = array[x];</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">if</span>(obj[item] !== <span class="hljs-literal">undefined</span>)</span></span><br><span class="language-javascript"><span class="language-xml">                &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    array[x] = array[array.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>];</span></span><br><span class="language-javascript"><span class="language-xml">                    array.<span class="hljs-property">length</span>--;</span></span><br><span class="language-javascript"><span class="language-xml">                    x--;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-keyword">continue</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">                obj[item] = item;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> array;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">87</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>];</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;数组去重: &quot;</span> +  <span class="hljs-title function_">unique</span>(array) + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/LyShark/p/15346588.html#_labelTop">回到顶部</a></p><h3 id="JavaScript-流程控制"><a href="#JavaScript-流程控制" class="headerlink" title="JavaScript 流程控制"></a>JavaScript 流程控制</h3><p><strong>IF 条件判断:</strong> 判断<code>if(num1&gt;num2)</code>如果条件满足则执行,否则判断<code>if(num2&gt;num3)</code>,满足执行否则执行<code>else</code>里面的代码.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> num1 = <span class="hljs-number">100</span>,num2 = <span class="hljs-number">200</span>,num3 = <span class="hljs-number">10</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span>(num1 &gt; num2 || num1 &gt; num3)</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> temp = num1 - num2;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;num1 大于 num2&quot;</span> + <span class="hljs-string">&quot; 比num2多出:&quot;</span> + temp + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num2 &gt; num3)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> temp = num2 - num3</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;num2 大于 num3&quot;</span> + <span class="hljs-string">&quot; 比num2多出:&quot;</span> + temp + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">else</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;没有合适的结果..&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>Switch 选择结构:</strong> switch通常用于选择结构,以下代码用户输入一个数值,进入选择结构根据输入数值执行相应代码片段.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> temp;</span></span><br><span class="language-javascript"><span class="language-xml">        temp = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请选择输入(1,2,*):&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">switch</span>(temp)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;你选择了1号&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">break</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;你选择了2号&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">break</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">default</span>:</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;你选择了其他选项&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">break</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>While 循环结构:</strong> 循环执行结构,while会一直循环下去,直到满足<code>(num &lt;=100)</code>的条件则跳出循环,语句语法结构如下.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>,sum = <span class="hljs-number">0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">while</span>(num &lt;=<span class="hljs-number">100</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            sum = sum +num;</span></span><br><span class="language-javascript"><span class="language-xml">            num = num +<span class="hljs-number">1</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;当前循环:  &quot;</span>+ num + <span class="hljs-string">&quot;  当前累加: &quot;</span> + sum);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;从1+100...结果是:&quot;</span> + sum)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>For 循环结构:</strong> 通过for循环遍历数组,这里提供了多种遍历写法.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    &lt;script type=&quot;text/javascript&quot;&gt;<br>        var names = [&quot;admin&quot;,&quot;guest&quot;,&quot;lyshark&quot;,&quot;alex&quot;]<br><br>        for(var i=0;i&lt;names.length;i++)<br>        &#123;<br>            document.write(&quot;当前位置: &quot;+ i +&quot;元素值: &quot; + names[i] + &quot;&lt;br&gt;&quot;);<br>        &#125;<br>        for(var index in names)<br>        &#123;<br>            document.write(&quot;当前位置: &quot;+ index +&quot;元素值: &quot; + names[index] + &quot;&lt;br&gt;&quot;);<br>        &#125;<br><br>        names.forEach(item =&gt;&#123; console.log(&quot;元素值: &quot; + item); &#125;);<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>try..catch:</strong> 异常处理,当try里面代码出现问题的时候自动执行catch抛出异常,最后无论是否异常都会执行finally.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">try</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 这段代码从上往下运行,其中任何一个语句抛出异常该代码块就结束运行</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">catch</span>(e)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">             <span class="hljs-comment">// 如果try代码块中抛出了异常,catch代码块中的代码就会被执行</span></span></span><br><span class="language-javascript"><span class="language-xml">             <span class="hljs-comment">// e是一个局部变量，用来指向Error对象或者其他抛出的对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">finally</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 无论try中代码是否有异常抛出(甚至是try代码块中有return语句),finally代码块中始终会被执行</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/LyShark/p/15346588.html#_labelTop">回到顶部</a></p><h3 id="JavaScript-定义函数"><a href="#JavaScript-定义函数" class="headerlink" title="JavaScript 定义函数"></a>JavaScript 定义函数</h3><p><strong>普通无参函数:</strong> 通过使用关键字<code>function</code>声明了<code>func()</code>无参数的函数.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;这个无参数函数被执行了...&quot;</span> + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> ret = <span class="hljs-title function_">func</span>()    <span class="hljs-comment">//调用函数,并将返回值赋值给ret变量</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;函数的返回值是: &quot;</span> + ret);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>普通有参函数:</strong> 通过使用关键字<code>function</code>声明了<code>func()</code>有参数的函数,其中形式参数有<code>name,age,sex</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">name,age,sex</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;姓名: &quot;</span> + name + <span class="hljs-string">&quot;年龄:&quot;</span> + age + <span class="hljs-string">&quot;性别: &quot;</span> + sex + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> ret = <span class="hljs-title function_">func</span>(<span class="hljs-string">&quot;lyshark&quot;</span>,<span class="hljs-string">&quot;22&quot;</span>,<span class="hljs-string">&quot;Man&quot;</span>)     <span class="hljs-comment">//调用函数</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;函数的返回值是: &quot;</span> + ret);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>传递数组地址:</strong> 我们不仅仅可以传递单个的参数,还可以将一个预定义好的数组传递到函数体内部.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">temp</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> temp)</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(temp[i] + <span class="hljs-string">&quot;  &quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">show</span>(array)  <span class="hljs-comment">//传递一个数组到函数体,并执行</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>定义匿名函数:</strong> 匿名函数,就是没有名字的函数,需要我们手动进行调用,一般情况不会使用.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> func = <span class="hljs-keyword">function</span>(<span class="hljs-params">x,y</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;参数1= &quot;</span> + x + <span class="hljs-string">&quot;参数2= &quot;</span> + y);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">func</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>)      <span class="hljs-comment">//调用匿名函数</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>自执行函数:</strong> 自执行函数,也就是说无论我们是否调用它,它都会被执行,适合做初始化工作.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        (<span class="hljs-keyword">function</span>(<span class="hljs-params">name,url</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;姓名: &quot;</span> + name + <span class="hljs-string">&quot;URL: &quot;</span> + url);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)(<span class="hljs-string">&quot;lyshark&quot;</span>,<span class="hljs-string">&quot;lyshark.com&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>arguments:</strong> 使用特殊对象arguments,开发者无需明确指出参数名,就能访问数据的内部元素.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;当前参数长度: &quot;</span> + <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">func</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>嵌套函数:</strong> 函数的嵌套是指在函数体的内部再次嵌套一层函数体,并依次返回执行结果,就是嵌套函数.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">ext_func</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;内部函数执行结果....&quot;</span> + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            ret = <span class="hljs-title function_">func</span>()</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> ret</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        ret = <span class="hljs-title function_">ext_func</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;内部函数返回值: &quot;</span> + ret)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>递归函数:</strong> 函数的递归是指函数不停地调用自身,直到满足一定得条件才会自动的跳出循环体.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">temp</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span>(temp == <span class="hljs-number">1</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">return</span> <span class="hljs-title function_">func</span>(temp-<span class="hljs-number">1</span>)+<span class="hljs-number">2</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        ret = <span class="hljs-title function_">func</span>(<span class="hljs-number">5</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;内部函数返回值: &quot;</span> + ret)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>函数闭包:</strong> 通常情况下,我们想调用一个函数内部的嵌套方法,我们可以使用闭包的形式来实现.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">func2</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">return</span> array;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> func2;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        temp = <span class="hljs-title function_">func1</span>()                    <span class="hljs-comment">//调用语句返回函数func2对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;函数返回对象: &quot;</span> + temp + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        ret = <span class="hljs-title function_">temp</span>()                      <span class="hljs-comment">//调用这个对象,最终得到结果</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;最终返回值: &quot;</span> + ret);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="JavaScript-DOM编程"><a href="#JavaScript-DOM编程" class="headerlink" title="JavaScript DOM编程"></a>JavaScript DOM编程</h3><p><strong>GetElementById:</strong> 根据ID号获取一个标签,这种方式是最常用的.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MyDiv&quot;</span>&gt;</span> hello world <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> temp = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;MyDiv&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;获取到的结果: &quot;</span> + temp.<span class="hljs-property">innerText</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>getElementsByName:</strong> 根据自定义标签<code>alex=MyDiv</code>属性获取标签集合.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">alex</span>=<span class="hljs-string">&quot;MyDiv&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span> hello lyshark <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> names = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;alex&quot;</span>);      <span class="hljs-comment">//通过自定义的名称找标签</span></span></span><br><span class="language-javascript"><span class="language-xml">        names.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;www.baidu.com&quot;</span>;                   <span class="hljs-comment">//改变元素标签名称</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;修改后的内容:&quot;</span> + names.<span class="hljs-property">innerText</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>getElementsByClassName:</strong> 根据class类名称属性获取标签集合.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">clas</span>=<span class="hljs-string">&quot;MyClass&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span> hello lyshark <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> names = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;MyClass&quot;</span>);  <span class="hljs-comment">//通过类名称找出标签</span></span></span><br><span class="language-javascript"><span class="language-xml">        names.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;www.baidu.com&quot;</span>;                       <span class="hljs-comment">//改变元素标签名称</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;修改后的内容:&quot;</span> + names.<span class="hljs-property">innerText</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>getElementsByTagName:</strong> 根据标签名<code>name=&quot;MyDiv&quot;</code>来获取标签集合.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MyDiv&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span> hello lyshark <span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> names = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;MyDiv&quot;</span>);      <span class="hljs-comment">//通过标签名称找出标签</span></span></span><br><span class="language-javascript"><span class="language-xml">        names.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;www.baidu.com&quot;</span>;                    <span class="hljs-comment">//改变元素标签名称</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;修改后的内容:&quot;</span> + names.<span class="hljs-property">innerText</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/24/%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%9B%E5%BB%BA%E5%A3%B0%E6%98%8E%E5%8F%8A%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
    <url>/2022/05/24/%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%9B%E5%BB%BA%E5%A3%B0%E6%98%8E%E5%8F%8A%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>方法详解</title>
    <link href="/2022/05/21/%E4%BD%95%E8%B0%93%E6%96%B9%E6%B3%95/"/>
    <url>/2022/05/21/%E4%BD%95%E8%B0%93%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li><strong>System.out.println（）就是一个典型的方法</strong></li></ul><p><strong>java方法类似于C语言中的函数，是完成特定功能的代码片段</strong></p><h3 id="java方法就是语句的集合，它们一起执行完成一个功能"><a href="#java方法就是语句的集合，它们一起执行完成一个功能" class="headerlink" title="java方法就是语句的集合，它们一起执行完成一个功能"></a>java方法就是语句的集合，它们一起执行完成一个功能</h3><ul><li><strong>方法是解决一类问题的步骤的有序集合</strong></li><li><strong>方法包含于类或者对象中</strong></li><li><strong>方法在程序中被创建，在其他地方被引用</strong></li></ul><h2 id="设计方法的原则："><a href="#设计方法的原则：" class="headerlink" title="设计方法的原则："></a>设计方法的原则：</h2><p><strong>保持方法的原子性，即一个方法只完成一个功能，这样做有利于后期的扩展</strong></p><h2 id="方法的定义："><a href="#方法的定义：" class="headerlink" title="方法的定义："></a>方法的定义：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 返回值类型 方法名(参数类型 参数名)&#123;<br>···<br>方法体<br>···<br><span class="hljs-keyword">return</span> 返回值;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>方法包含方法头和方法体。</strong></p><ul><li><p><strong>修饰符</strong>：可选的，它可以告诉编译器如何调用方法。定义方法的访问类型</p></li><li><p><strong>返回值类型</strong>：returnValueType是返回值的数据类型，有些方法可能会有返回值，有些方法执行操作但没有返回值，没有返回值的方法returnValueType的关键字是<em><strong>void</strong></em></p><ul><li><strong>return</strong>除了返回值，还可以<em><strong>终止方法</strong></em>，一旦程序运行中碰到<strong>return</strong>，这个方法就结束了</li></ul></li><li><p><strong>方法名</strong>：方法的名字，与参数表一起构成方法签名</p><blockquote><p>参考[[java中的变量#变量的命名规范]]</p></blockquote></li><li><p><strong>参数类型</strong>：参数是可选的，方法可以不包含任何参数；当方法被调用的时候，传递值给参数，这个值被称为实参或变量。参数列表指方法的参数类型、顺序和个数。</p><ul><li><em>形式参数</em>：在方法被调用是用于接收外界输入的数据</li><li><em>实际参数</em>：调用方法时实际传给方法的数据</li></ul></li></ul></li></ul><h2 id="方法的调用："><a href="#方法的调用：" class="headerlink" title="方法的调用："></a>方法的调用：</h2><p><strong>调用方法：对象名.方法名(实参列表)</strong></p><p><strong>java提供两种调用方法的方式，根据该方法是否有返回值来决定</strong></p><ul><li>当方法返回一个值的时候，方法调用通常就被当成一个值，例如：<br><code>int bigger = max(30,40);</code></li><li>当方法返回值类型为 <em><strong>void</strong></em> 时，方法调用一定是一条语句，例如：<br><code>System.out.println(&quot;hello,world!&quot;);</code></li></ul><h2 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h2><blockquote><p><strong>值传递是对于基本数据类型而言，引用传递是对于引用数据类型而言</strong></p></blockquote><ul><li><p><strong>值传递</strong>：是指在调用函数时，将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，就<strong>不会影响到实际参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//值传递</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test01</span>().change(number);<br>        System.out.println(<span class="hljs-string">&quot;number=&quot;</span>+number);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>        a=a+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">number=<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></li><li><p><strong>引用传递</strong>：是指在调用函数时，将实际参数的地址传递到函数中，那么在函数中对参数进行修改，将<strong>会影响到实际参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//引用传递</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test01</span>().change(user);<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(User a)</span>&#123;<br>        a.setName(<span class="hljs-string">&quot;小张&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">小张<br></code></pre></td></tr></table></figure></li></ul><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p><strong>&#x3D;&#x3D;引用类型中的String的值是存放在常量池中的，我们改变它副本的值是不会影响到原来的值的&#x3D;&#x3D;</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//String类型的引用传递</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test01</span>().change(str);<br>        System.out.println(str);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String a)</span>&#123;<br>        a=<span class="hljs-string">&quot;yes&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hello<br></code></pre></td></tr></table></figure><h2 id="方法重载："><a href="#方法重载：" class="headerlink" title="方法重载："></a>方法重载：</h2><ul><li><strong>重载就是在一个类中，有相同名字，但形参不同的方法</strong></li></ul><p><strong>实现原理：<br>    在JVM运行过程中，当方法名相同时，编译器会根据调用方法的参数个数、参数类型、参数顺序去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错</strong></p><ul><li><strong>方法重载的规则</strong><ul><li><strong>方法名必须相同</strong></li><li><strong>参数列表必须不同</strong>（可以是个数不同、类型不同、或者顺序不同）</li><li>**方法的返回值类型可以相同也可以不同</li></ul></li></ul><h2 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h2><p>运行某程序时再给它传递消息，可以通过传递命令行参数给main()方法实现。</p><p>程序功能如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.duyuan;  <br><span class="hljs-comment">//命令行传参 测试  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cdTest</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;  <br>            System.out.println(<span class="hljs-string">&quot;args[&quot;</span>+i+<span class="hljs-string">&quot;]:&quot;</span>+args[i]);  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>通过cmd命令将 <em>cdTest.java源文件</em>  编译为class字节码文件后再通过cmd命令进行执行时，&#x3D;&#x3D;必须要回到src路径下再加上文件的包路径才能正确执行&#x3D;&#x3D;：</strong></p><p><img src="/img/post_img/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BC%A0%E5%8F%82error.jpg"></p><p><strong>正确如下：</strong><br><img src="/img/post_img/test.jpg"></p><p><strong>如上所示已经正确运行了程序，我们再直接在命令行后面加上参数就可以实现命令行传参，并成功运行</strong>：</p><p><img src="/img/post_img/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BC%A0%E5%8F%82%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8.jpg"></p><h2 id="可变参数-不定项参数-："><a href="#可变参数-不定项参数-：" class="headerlink" title="可变参数(不定项参数)："></a>可变参数(不定项参数)：</h2><ul><li>从JDK1.5开始，Java支持传递&#x3D;&#x3D;同类型&#x3D;&#x3D;的可变参数给一个方法</li><li>在方法声明中，在指定参数类型后加一个省略号(…)即可实现可变参数</li><li>一个方法中只能指定一个可变参数，&#x3D;&#x3D;它必须是方法的最后一个参数&#x3D;&#x3D;。所有的普通参数都要在可变参数之前声明。</li></ul><p>eg：实现输出得到输入数据中最大的数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.duyuan;  <br><span class="hljs-comment">//通过可变参数实现输出得到输入数据中最大的数  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        printMax(<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5.4</span>,<span class="hljs-number">94.4</span>,<span class="hljs-number">52</span>);<span class="hljs-comment">//第一种调用可变参数的方式  </span><br>        System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);  <br>        printMax(<span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5.5</span>,<span class="hljs-number">46.1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">11</span>&#125;);<span class="hljs-comment">//第二种调用可变参数的方式  </span><br>  <br>    &#125;  <br><span class="hljs-comment">//排序算法  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMax</span><span class="hljs-params">(<span class="hljs-type">double</span>... numbers)</span>&#123;<span class="hljs-comment">//声明可变参数 numbers  </span><br>        <span class="hljs-keyword">if</span> (numbers.length==<span class="hljs-number">0</span>) &#123;  <br>            System.out.println(<span class="hljs-string">&quot;没有输入&quot;</span>);  <br>            <span class="hljs-keyword">return</span>;  <br>        &#125;  <br>        <span class="hljs-type">double</span> result=numbers[<span class="hljs-number">0</span>];  <br>  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; numbers.length;i++)&#123;  <br>              <span class="hljs-keyword">if</span>(numbers[i]&gt;result)&#123;  <br>                  result=numbers[i];  <br>              &#125;  <br>        &#125;  <br>        System.out.println(<span class="hljs-string">&quot;最大数是：&quot;</span>+result);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><br>最大数是：<span class="hljs-number">94.4</span><br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br>最大数是：<span class="hljs-number">46.1</span><br><br>Process finished with exit code <br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用DOS命令</title>
    <link href="/2022/05/20/%E5%B8%B8%E7%94%A8DOS%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/05/20/%E5%B8%B8%E7%94%A8DOS%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="盘符切换"><a href="#盘符切换" class="headerlink" title="盘符切换"></a>盘符切换</h1><p><code>D:</code><br><code>E:</code></p><blockquote><p>冒号是英文的冒号</p></blockquote><h1 id="查看当前目录的所有文件"><a href="#查看当前目录的所有文件" class="headerlink" title="查看当前目录的所有文件"></a>查看当前目录的所有文件</h1><p> <code>dir</code></p><h1 id="改变目录"><a href="#改变目录" class="headerlink" title="改变目录"></a>改变目录</h1><p>切换盘  <code>cd /d f:</code><br>返回当前目录的上一级 <code>cd..</code><br>进入当前目录的下一级 <code>cd 文件名</code></p><h1 id="清理当前屏幕"><a href="#清理当前屏幕" class="headerlink" title="清理当前屏幕"></a>清理当前屏幕</h1><p> <code>cls</code></p><h1 id="退出终端"><a href="#退出终端" class="headerlink" title="退出终端"></a>退出终端</h1><p> <code>exit</code></p><h1 id="查看电脑ip"><a href="#查看电脑ip" class="headerlink" title="查看电脑ip"></a>查看电脑ip</h1><p> <code>ipconfig</code></p><h1 id="打开软件"><a href="#打开软件" class="headerlink" title="打开软件"></a>打开软件</h1><p> 计算器<br> <code>calc</code><br> 画图<br> <code>mspaint</code><br> 记事本<br> <code>notepad</code></p><h1 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h1><p> 得到一些网站信息<code>ping 网址</code></p><h1 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h1><p>创建文件夹<br><code>md 文件夹名</code><br>创建文件<br><code>cd&gt;文件名.文件后缀</code><br>删除文件<br><code>del 文件名.文件后缀</code><br>清除文件夹<br><code>rd 文件夹名</code></p><blockquote><p>清除目录需要在它的上一级进行操作</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/20/hello-world/"/>
    <url>/2022/05/20/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Scanner与用户进行交互</title>
    <link href="/2022/05/18/Scanner%E4%B8%8E%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92/"/>
    <url>/2022/05/18/Scanner%E4%B8%8E%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>通过Scanner类来获得用户的输入</strong></p><h1 id="Scanner用完以后要关闭！！！"><a href="#Scanner用完以后要关闭！！！" class="headerlink" title="Scanner用完以后要关闭！！！"></a>Scanner用完以后要关闭！！！</h1><h1 id="Scanner用完以后要关闭！！！-1"><a href="#Scanner用完以后要关闭！！！-1" class="headerlink" title="Scanner用完以后要关闭！！！"></a>Scanner用完以后要关闭！！！</h1><h1 id="Scanner用完以后要关闭！！！-2"><a href="#Scanner用完以后要关闭！！！-2" class="headerlink" title="Scanner用完以后要关闭！！！"></a>Scanner用完以后要关闭！！！</h1><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>&#96;Scanner  s  &#x3D;  new  Scanner(System.in)</p><h2 id="通过Scanner类的next-与nextLine-获取用户输入的字符串"><a href="#通过Scanner类的next-与nextLine-获取用户输入的字符串" class="headerlink" title="**通过Scanner类的next()与nextLine()获取用户输入的字符串"></a>**通过Scanner类的next()与nextLine()获取用户输入的字符串</h2><h3 id="next-："><a href="#next-：" class="headerlink" title="next()："></a>next()：</h3><ul><li>**只有读取到有效字符后才能够结束输入</li><li>**在读取到有效字符之前的空白，next()方法会自动把它们删掉</li><li>**读取到有效字符后的空白，next()方法会将空白作为结束符</li><li>***next()方法无法得到含空白的字符串<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.duyuan.com.duyuan;  <br>  <br><span class="hljs-keyword">import</span> java.util.Scanner;  <br><span class="hljs-comment">//next()方法测试  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">scanner</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        Scanner scanner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//获得输入  </span><br>        System.out.println(<span class="hljs-string">&quot;使用next方法接收&quot;</span>);  <br>        System.out.println(<span class="hljs-string">&quot;=========================&quot;</span>);  <br>        <span class="hljs-keyword">if</span>(scanner.hasNext()==<span class="hljs-literal">true</span>)&#123;<span class="hljs-comment">//判断是否还有输入  </span><br>            String str= scanner.next();  <br>            System.out.println(<span class="hljs-string">&quot;获得的数据是：&quot;</span>+str);<br>            scanner.close();  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&quot;C:\Program Files\Java\jdk1.8.0_201\bin\java.exe&quot; &quot;-<br><span class="hljs-section">使用next方法接收</span><br><span class="hljs-section">=========================</span><br>这是next()方法  测试<br>获得的数据是：这是next()方法<br><br>Process finished with exit code 0<br></code></pre></td></tr></table></figure><h3 id="nextLine-："><a href="#nextLine-：" class="headerlink" title="nextLine()："></a>nextLine()：</h3><ul><li><strong>以Enter作为结束符，也就是说nextLine()方法会返回按下回车之前输入的所有字符</strong></li><li><strong>nextLine()方法可以得到有空白的字符串</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.duyuan.scanner;  <br>  <br><span class="hljs-keyword">import</span> java.util.Scanner;  <br>  <br><span class="hljs-comment">//这是nextLine()方法测试  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">nextLineMethod</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        Scanner scanner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//获得输入数据  </span><br>        System.out.println(<span class="hljs-string">&quot;使用nextLine()方法接收&quot;</span>);  <br>        System.out.println(<span class="hljs-string">&quot;======================&quot;</span>);  <br>        <span class="hljs-comment">//判断是否还有输入  </span><br>        <span class="hljs-keyword">if</span>(scanner.hasNextLine()==<span class="hljs-literal">true</span>)&#123;  <br>            String str= scanner.nextLine();  <br>            System.out.println(<span class="hljs-string">&quot;获得的数据：&quot;</span>+str);<br>            scanner.close();<br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&quot;C:\Program Files\Java\jdk1.8.0_201\bin\java.exe&quot; &quot;-<br><span class="hljs-section">使用nextLine()方法接收</span><br><span class="hljs-section">======================</span><br>这是nextLine()方法   测试<br>获得的数据：这是nextLine()方法   测试<br><br>Process finished with exit code 0<br></code></pre></td></tr></table></figure><h2 id="通过hasNext-与hasNextLine-来判断是否还有输入"><a href="#通过hasNext-与hasNextLine-来判断是否还有输入" class="headerlink" title="通过hasNext()与hasNextLine()来判断是否还有输入"></a>通过hasNext()与hasNextLine()来判断是否还有输入</h2><p><strong>一般在循环中使用，在上面的Demo中可加可不加；</strong></p><h3 id="利用hasNext-方法实现退出循环"><a href="#利用hasNext-方法实现退出循环" class="headerlink" title="利用hasNext()方法实现退出循环"></a>利用hasNext()方法实现退出循环</h3><p><strong>example：写一程序，允许用户输入多个数字，并求它们的和与平均数，通过输入非数字数据来结束输入并输出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.duyuan.scanner;  <br><span class="hljs-keyword">import</span> java.util.Scanner;  <br><span class="hljs-comment">//写一程序，允许用户输入多个数字，并求它们的和与平均数，通过输入非数字数据来结束输入并输出结果  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo01</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        Scanner scanner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);  <br>        <span class="hljs-type">double</span> sum=<span class="hljs-number">0.0</span>;<span class="hljs-comment">//和  </span><br>        <span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;<span class="hljs-comment">//输入数字的个数  </span><br>        <span class="hljs-keyword">while</span> (scanner.hasNextDouble()==<span class="hljs-literal">true</span>)&#123;<span class="hljs-comment">//判断输入的数据是否是数字  </span><br>            <span class="hljs-type">double</span> x=scanner.nextDouble();  <br>            sum=sum+x;  <br>            n++;  <br>        &#125;  <br>        System.out.println(<span class="hljs-string">&quot;你输入的数字个数为&quot;</span>+n);  <br>        System.out.println(<span class="hljs-string">&quot;和为：&quot;</span>+sum);  <br>        System.out.println(<span class="hljs-string">&quot;平均数为：&quot;</span>+sum/n);  <br>        scanner.close();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-string">&quot;C:\Program Files\Java\jdk1.8.0_201\bin\java.exe&quot;</span> <span class="hljs-comment">&quot;-</span><br><span class="hljs-number">10</span><br><span class="hljs-number">20</span><br><span class="hljs-number">30</span><br><span class="hljs-number">40</span><br><span class="hljs-keyword">x</span><br>你输入的数字个数为<span class="hljs-number">4</span><br>和为：<span class="hljs-number">100.0</span><br>平均数为：<span class="hljs-number">25.0</span><br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java中的数据类型</title>
    <link href="/2022/05/17/Java%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/05/17/Java%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>Java是一种强类型语言</strong>——安全性更高</p><p>要求变量的使用严格符合规定，所有的变量都必须先定义后才能使用</p><hr><h1 id="java中的数据类型"><a href="#java中的数据类型" class="headerlink" title="java中的数据类型"></a>java中的数据类型</h1><p>[[Java中的标识符和关键字]]</p><blockquote><p>除了基本数据类型，其他的都是引用数据类型</p></blockquote><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul><li><p>数值类型</p><ul><li>整数型</li></ul><blockquote><p>拓展：java中不同进制整数的表示</p><p>二进制：0b开头</p><p>八进制：0开头</p><p>十六进制：0x开头</p></blockquote><ol><li><p>byte 1个字节</p></li><li><p>short 2个字节</p></li><li><p>int 4个字节</p></li><li><p>long 8个字节</p><blockquote><p>一般用到long的时候会在数字后面加一个L以作标识</p><p><code>long num=100L</code></p></blockquote></li></ol><ul><li>浮点型</li></ul><p><em><strong>尽量避免用浮点型数据进行比较，大数使用BigDecimal类进行操作</strong></em></p><blockquote><p>BigDecimal类是一个数学工具类</p><p>float与double类型的浮点数是有限、离散的，具有舍入误差，它只能表示一个接近但不等于的约数；</p><p>example：银行业务，大额的钱怎么表示，不能用float或者double，应该使用BigDecimal类</p><hr><p>float f&#x3D;0.1；</p><p>double d&#x3D;1.0&#x2F;10;</p><p>System.out.printf(f &#x3D;&#x3D; d)会判断为f不等于d</p><hr><p>float f1&#x3D;23259562999999</p><p>float f2&#x3D;f1+1</p><p>System.out.printf(f1 &#x3D;&#x3D; f2)会判定为真，即f1&#x3D;f2</p></blockquote><ol><li>float 4个字节</li><li>double 8个字节</li></ol><ul><li>字符型char 2个字节</li></ul><blockquote><p><em><strong>字符本质上仍然是数字</strong></em></p><p>字符的编码来自于Unicode表，Unicode表  0—65536</p><p>转码表示范围：U0000—UFFFF</p><p>char c&#x3D;’\u0061’实际上c&#x3D;’a’</p></blockquote></li><li><p>boolean类型——true和false 占<strong>1位</strong></p></li></ul><blockquote><p><strong>位(bit)<strong>与</strong>字节(byte)<strong>的关系：</strong>bit</strong>是计算机中内部数据存储的最小单元，example：11001100是一个八位二进制数；</p><p><strong>byte</strong>一般用<em><strong>B</strong></em>来表示，是计算机中进行数据处理的基本单位，<strong>1B&#x3D;8bit</strong></p><p>可以理解为<strong>bit</strong>是一个存储单元，而<strong>byte</strong>是一行8个存储单元</p><p><strong>字符</strong>：计算机使用的字母、数字、字、符号</p></blockquote><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ul><li>类</li><li>接口</li><li>数组</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java中的运算符</title>
    <link href="/2022/05/17/Java%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2022/05/17/Java%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="java支持的运算符"><a href="#java支持的运算符" class="headerlink" title="java支持的运算符"></a>java支持的运算符</h1><ul><li>算术运算符：+，-，*，&#x2F;，%，++，–</li><li>赋值运算符：&#x3D;，+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;</li><li>关系运算符：&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;,&#x3D;&#x3D; ,!&#x3D;intstanceof</li><li>逻辑运算符：与&amp;&amp;，或||，非！</li><li>位运算符：&amp;，|，^，~，&gt;&gt;（右移）,&lt;&lt;（左移）,&gt;&gt;&gt;</li><li>条件运算符：？：</li></ul><h1 id="a与a"><a href="#a与a" class="headerlink" title="++a与a++"></a>++a与a++</h1><p><em><strong>a–和–a同理</strong></em></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>()</span>&#123;<br><span class="hljs-built_in">int</span> a=<span class="hljs-number">3</span>;<br><span class="hljs-built_in">int</span> b=a++;<br><span class="hljs-comment">//a++是执行这行代码后，先把值赋给b，后自增</span><br><span class="hljs-built_in">int</span> c=++a;<br><span class="hljs-comment">//++a是执行这行代码前，先自增，再把自增后的值赋给c</span><br><br>System.<span class="hljs-keyword">out</span>.printf(a)<br>System.<span class="hljs-keyword">out</span>.printf(b)<br>System.<span class="hljs-keyword">out</span>.printf(c)<br><span class="hljs-comment">//结果是a=5,b=3,c=5</span><br>&#125; <br></code></pre></td></tr></table></figure><h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><p>***针对于二进制数的每一位</p><p>A&#x3D;0011 1100<br>B&#x3D;0000 1101</p><hr><ul><li>A&amp;B&#x3D;0000 1100 与：两个二进制数的对应位上都是1，才为1</li><li>A|B &#x3D;0011 1101   或：两个二进制数对应位上有一个1，就为1</li><li>A^B &#x3D;0011 0001  异或：两个二进制数对应位上不相同，才为1</li><li>~A &#x3D;1100 0011    </li><li>~B &#x3D;1111 0010     取反：每一位都取反</li></ul><h3 id="lt-lt-左移，-gt-gt-右移"><a href="#lt-lt-左移，-gt-gt-右移" class="headerlink" title="&lt;&lt;左移，&gt;&gt;右移"></a>&lt;&lt;左移，&gt;&gt;右移</h3><p>example：怎么最快的计算2 * 8<br>2 * 8&#x3D;2 * 2 * 2 * 2<br>2&#x3D;0000 0010<br>向左移3位<br>2&lt;&lt;3 &#x3D; 0001 0000 &#x3D; 16<br>即：*<em>左移×2，右移÷2</em></p><blockquote><p>***位运算的效率极高，多用于底层</p></blockquote><h1 id="sout中的字符串连接符"><a href="#sout中的字符串连接符" class="headerlink" title="sout中的字符串连接符      +"></a>sout中的字符串连接符      +</h1><p>***在出现+之后，会将输出内容都转化为字符串类型，在出现+之前则是进行正常运算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b=<span class="hljs-number">20</span>;<br>System.out.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&#x27; &#x27;</span>+a+b);<span class="hljs-comment">//输出1020</span><br>System.out.<span class="hljs-built_in">printf</span>(a+b+<span class="hljs-string">&#x27; &#x27;</span>);<span class="hljs-comment">//输出30</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java变量</title>
    <link href="/2022/05/17/java%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/"/>
    <url>/2022/05/17/java%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><strong><code>  数据类型 变量名 = 值 ;</code></strong></p><ul><li>变量就是可以变化的量</li><li>Java是一种强类型语言，每个变量都必须声明类型</li><li>Java中变量是程序最基本的存储单元</li><li>变量的要素包括：<em><strong>变量类型、变量名、作用域</strong></em></li><li>每个变量都必须有类型，可以是基本类型，也可以是引用类型</li><li>变量名必须是合法的标识符</li><li>变量的声明是一条完整语句，每个声明都要以分号结束</li></ul><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><ul><li><em><strong>类变量</strong></em></li><li><em><strong>实例变量</strong></em></li><li><em><strong>局部变量</strong></em></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br>    <span class="hljs-keyword">static</span> 变量类型 变量名 = 值;<span class="hljs-comment">//这是类变量,从属于类</span><br>    <br>    变量类型 变量名(= 值);<span class="hljs-comment">/*这是实例变量，实例变量从属于对象；如果不进行初始化，它的值就是该类型的默认值；</span><br><span class="hljs-comment">    0或0.0</span><br><span class="hljs-comment">    布尔型默认值是false</span><br><span class="hljs-comment">    除了基本类型，其他的默认值都是null*/</span><br>&#125;<br><br><span class="hljs-comment">//main方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    变量类型 变量名 = 值;<span class="hljs-comment">//这是局部变量，必须声明和初始化</span><br>&#125;<br><br><span class="hljs-comment">//其他方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>常量（Constant）：初始化（initialize）后就<strong>不能再改变</strong>的量，可以理解为一种特殊的变量，它初始化后，在程序运行过程中<strong>不允许改变</strong></p><p><code> final 常量名 = 值 ;</code></p><p><code> final PI = 3.14;</code></p><ul><li>常量名一般用大写</li></ul><blockquote><p><em><strong>final与static都是修饰符，修饰符不区分先后</strong></em></p></blockquote><h1 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h1><p>参考[[Java中的标识符和关键字]]</p><ul><li>所有的变量、方法、类名：要求见名知意</li><li>类成员变量——首字母小写和峰原则：monthSalary、lastName</li><li>局部变量——首字母小写和驼峰原则</li><li>常量——大写字母和下划线：MAX_VALUE</li><li>类名——首字母大写和驼峰原则：Man、GoodMan</li><li>方法名——首字母小写和驼峰原则：run()、runAway()</li></ul><blockquote><p>***驼峰原则：当由两个或以上的单词组成命名时，第一个单词首字母小写，后面的单词首字母都要大写</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java标识符&amp;关键字</title>
    <link href="/2022/05/14/Java%E4%B8%AD%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2022/05/14/Java%E4%B8%AD%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java中的关键字"><a href="#Java中的关键字" class="headerlink" title="Java中的关键字"></a>Java中的关键字</h1><p><img src="C:\Users\Etheral\Documents\Code文档\java\Java关键字.jpg" alt="关键字"></p><blockquote><p><a href="https://blog.csdn.net/weixin_47325151/article/details/120331683">关键字的用法</a></p></blockquote><hr><p><strong>Java中所有组成部分都需要名字，类名、方法名、变量名就称为标识符</strong></p><hr><h1 id="标识符注意点"><a href="#标识符注意点" class="headerlink" title="标识符注意点"></a>标识符注意点</h1><ul><li><p>所有标识符首字符只能是大小写字母，美刀符$，下划线_</p></li><li><p>首字符之后可以是字母，数字，下划线，美元符的任意组合</p></li><li><p><strong>不能使用关键字</strong></p></li><li><p><strong>标识符是区分大小写的</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java程序运行机制</title>
    <link href="/2022/05/14/Java%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/05/14/Java%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java的程序运行机制"><a href="#Java的程序运行机制" class="headerlink" title="Java的程序运行机制"></a>Java的程序运行机制</h1><p><em><strong>Java既是编译型也是解释型</strong></em></p><p><strong>Java程序运行流程</strong></p><p><strong>java源文件—&gt;java编译器—&gt;编译—&gt;class字节码文件—&gt;<br>JRE-java虚拟机(类加载器–&gt;字节码校验器–&gt;解释器)—&gt;操作系统进行指令操作</strong></p><ol><li><p>编译型</p><p>效率高，反应速度快</p><p>example：操作系统</p></li><li><p>解释型</p><p>对速度要求不高</p><p>example：网页</p></li></ol><p>举个例子</p><p>一个外国人想要看一本中文书，他可以直接购买一本全本都翻译成英文的——编译型</p><p>他也可以请一位翻译人员逐字逐句的给他翻译过来看——解释型</p><p>但是一但原来中文的原本有改动，译本就要重新翻译，而后者就可以灵活改动</p><blockquote><p>随着硬件的发展，解释型和编译型的效率越来越接近</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java中的三种注释</title>
    <link href="/2022/05/14/Java%E4%B8%AD%E7%9A%84%E6%B3%A8%E9%87%8A/"/>
    <url>/2022/05/14/Java%E4%B8%AD%E7%9A%84%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Java中的注释"><a href="#Java中的注释" class="headerlink" title="Java中的注释"></a>Java中的注释</h1><ol><li><p>单行注释</p><p><code>//注释内容</code></p></li><li><p>多行注释</p><p><code>/*</code></p><p><code>注释内容</code></p><p><code>注释内容</code></p><p><code>*/</code></p></li><li><p>文档注释</p><p>JavaDoc<br>**内容：</p><ul><li>@author     *作者名</li><li>@version    <em>版本号</em></li><li>@since       <em>指明需要最早使用的JDK版本</em></li><li>@param      <em>参数名</em></li><li>@return      *返回值情况</li><li>@throws    <em>异常抛出情况</em></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">注释内容</span><br><span class="hljs-comment">@</span><br><span class="hljs-comment">别的功能和内容</span><br></code></pre></td></tr></table></figure></li></ol><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">package</span> <span class="hljs-variable">com</span>.<span class="hljs-property">duyuan</span>;  <br>  <br><span class="hljs-comment">/**类注释  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> duyuan  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.8 * */</span><span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">javaDoc</span> &#123;  <br><span class="hljs-title class_">String</span> <span class="hljs-variable">name</span>;  <br>  <br>    <span class="hljs-comment">/**方法注释  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> duyuan  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@version</span> 1.8     * <span class="hljs-doctag">@param</span> name  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception  </span><br><span class="hljs-comment">     *  </span><br><span class="hljs-comment">     */</span>    <span class="hljs-variable">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">test</span>(<span class="hljs-title class_">String</span> <span class="hljs-variable">name</span>) <span class="hljs-variable">throws</span> <span class="hljs-title class_">Exception</span>&#123;  <br>  <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">name</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>***使用文档注释后，可以通过cmd或者IDE生成注释文档</p><p>**cmd命令：<br>javadoc -encoding UTF-8 -charset UTF-8 文件名.java<br>![[JavaDoc.jpg]]</p><p>**在IDEA中<br>上方工具栏中的Tools—&gt;Generate JavaDoc—&gt;Output directory选择存放文档地址—&gt;Locale: zh_CN配置语言为中文，Command line arguments:-encoding UTF-8 -charset UTF-8使用UTF8编码—&gt;Generate<br>![[JavaDoc生成.jpg]]</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java简述</title>
    <link href="/2022/05/14/Java%E7%AE%80%E8%BF%B0/"/>
    <url>/2022/05/14/Java%E7%AE%80%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="C-and-C"><a href="#C-and-C" class="headerlink" title="C and C++"></a>C and C++</h1><ul><li>1982年C++诞生</li><li>面向对象</li><li>图形、游戏领域</li></ul><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ul><li><del>Java 2标准版（J2SE）：桌面端</del></li><li><del>java 2移动版（J2ME）：手机端</del></li><li>Java 2企业版（J2EE）：服务器端</li></ul><blockquote><p>三高问题：高性能，高可用，高并发</p></blockquote><h2 id="基于Java开发的系统、平台、工具"><a href="#基于Java开发的系统、平台、工具" class="headerlink" title="基于Java开发的系统、平台、工具"></a>基于Java开发的系统、平台、工具</h2><ul><li>构建工具：Ant、Maven、Jekins</li><li>应用服务器：Tomcat、Jetty、Jboss、Websphere、weblogic</li><li>Web开发：Struts、Spring、myBatis</li><li>开发工具：Eclipse、Idea、Netbean、Intellij</li><li>2006年基于java分布式管理出现了Hadoop-大数据领域</li><li>2008年Android的发展和流行</li></ul><h1 id="Java的特性和优势"><a href="#Java的特性和优势" class="headerlink" title="Java的特性和优势"></a>Java的特性和优势</h1><ul><li>简单性</li><li>面向对象</li><li>可移植性</li><li>高性能</li><li>分布式</li><li>动态性——反射机制</li><li>多线程</li><li>安全性</li><li>健壮性</li></ul><h1 id="Java成功的原因"><a href="#Java成功的原因" class="headerlink" title="Java成功的原因"></a>Java成功的原因</h1><p>顺应时代的发展，贴合了互联网时代来临的需求，自身足够优秀</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css基础</title>
    <link href="/2022/04/09/css%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/04/09/css%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="第一章-css基础"><a href="#第一章-css基础" class="headerlink" title="** 第一章 css基础**"></a>** 第一章 css基础**</h2><p>css是动态html技术，他扩充了HTML标记的属性设置，使得页面显示效果更加丰富。</p><p>css对页面元素、布局等能够更加精确控制，同时能够实现内容和表现的分离，使得网站的设计风格趋向统一、维护更加容易</p><p>在HTML中写样式会让网页过“胖”，后期难维护</p><p>css专注于样式“美化” html专注“内容结构” 有利于表现、内容相分离后期易维护</p><p><strong>css的组成：选择器+声明</strong></p><p>css 的优点：</p><ol><li>内容表现相分离</li><li>增强网页的表现力</li><li>风格统一</li><li>多次引用</li></ol><h3 id="css的概念"><a href="#css的概念" class="headerlink" title="css的概念"></a><strong>css的概念</strong></h3><p>css层叠样式表（也称级联样式表），是用来进行网页风格设计。它是一种能让表现和内容相分离的样式语言，用于控制页面的表现（外观和内容排版）。他对HTML来说是一种有效补，利用CSS，可以创建各种规则，应用到所有的HTML元素。</p><p>css规则：选择器+声明（CSS是包含一个或多个规则的文本文件）</p><p>css优势：</p><ol><li>表现和内容相分离</li><li>增强了网页的表现力</li><li>设计风格趋于统一</li><li>一个页面多次使用</li></ol><h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a><strong>代码风格</strong></h3><ol><li><p>样式格式书写：</p></li><li><ol><li>紧凑格式</li><li>展开格式（更直观），代码压缩</li></ol></li><li><p>空格规范：<br>\1. 属性值前面，冒号后面，保留一个空格<br>\2. 选择器和大括号中间保留空格</p></li></ol><h3 id="选择器的作用"><a href="#选择器的作用" class="headerlink" title="选择器的作用"></a><strong>选择器的作用</strong></h3><p>选择器就是根据不同的需求把不同标签选出来</p><p><strong>选择器分为基础选择器和联合选择器</strong></p><p><strong>基础选择器</strong></p><ol><li>标记选择器</li><li>类选择器 重用性<br>\1. 多类名使用方式 个人理解就是id选择器，但是id选择器只能调用一次，而class选择器的多类名使用可以调用多次</li><li>id选择器 id主要与js一起用</li><li>通配符选择器 *通配符 在数据库查询中可以选取所有结果，在css中可以选取所有元素（标签），对页面整体设置统一风格</li><li>伪类选择器 链接访问后变色 a:hover（鼠标悬停时）必须设置于a:link（访问前） a:visited（访问后)之后，a:active（点击与释放）必须设置a:hover之后</li></ol><p><strong>联合选择器</strong></p><p>两种或以上的选择器直接连接，联合使用，好处是当不同的标签有相同的样式时，可以调用同一个类选择器即设定特定类中的特定标记，解放程序员，方便我们偷懒，联合选择器可以更准确、更高效的选择目标元素（标记）</p><p><strong>后代选择器（包含选择器）：</strong>某个标签里面的所有元素，包括儿子、孙子。。。 格式： 父 子 孙 { 样式声明} 改变子和孙同类标签的样式</p><p><strong>子选择器：</strong>只要某个标记里面的子元素 格式： 父&gt;子 { 样式声明} 只选择最近一级子元素，改变子样式</p><p><strong>集体声明（并集选择器&#x2F;群组选择器）：</strong>用，把他们分开 元素1，元素2{样式声明}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span>,</span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span>,</span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: blanchedalmond;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>www<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>uuu<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>uuu<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>ttt<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>qqq<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>并集选择器竖着写</p><p>最后一个选择器不用加逗号</p><p><strong>伪类选择器：</strong>伪类选择器 前有“ ： ” 链接伪类、结构伪类</p><p>链接伪类：</p><ol><li>a:link</li><li>a:visited</li><li>a:hover</li><li>a:active</li></ol><p>注意：</p><ol><li>要按照lvha的顺序</li><li>但单独给a链接设置样式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: blanchedalmond;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: blanchedalmond;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>yyy<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>www<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> &gt;</span>ttt<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>：focus 伪类选择器</strong>用于选取获得焦点的表单元素</p><p><strong>css选择器声明</strong></p><p><strong>集体声明、全局声明、派生选择器</strong></p><p><strong>全局声明就是使用通配符选择器</strong></p><p><strong>派生选择器（上下文选择器）：</strong>根据标记所在位置的<strong>上下文来定义样式</strong>，可以使标记<strong>更简洁</strong>。 派生选择器允许根据文档的上下文关系来确定某个标记的样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">strong</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>: normal;</span><br><span class="language-css">            <span class="hljs-attribute">font-style</span>: italic; </span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>so nice,bro<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>niyaoya~<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="选择器使用"><a href="#选择器使用" class="headerlink" title="选择器使用"></a><strong>选择器使用</strong></h3><p>标记选择器（元素选择器）是指用HTML标签名作为选择器，按标签名分类，为页面中某一类所有标签指定统一的CSS样式（即将同一类的标签选择出来，设置统一的样式，但是不能差异化样式同一类型的标签，他们的样式一定相同，但这样的不能满足我们的需求，于是可以使用类选择器，对单独的某一个标签设置类选择器，这样就可以让他的样式区别于其他同类标签，由于css中有时候出现一些相同的属性，为了解放程序员，就会将相同的属性放在另一个class选择器里面，这样就可以通过class选择器，对标签设置相同的属性辽~，这就是多类名的使用，id选择器具有唯一标识，就像数据库中的主码，java中的主类，只能有一个，不能重复。</p><h3 id="css定义与引用"><a href="#css定义与引用" class="headerlink" title="css定义与引用"></a><strong>css定义与引用</strong></h3><p><strong>CSS规则定义位置可以分为四种</strong>：</p><ol><li><strong>内联样式表（行内样式表）</strong>：不包含选择器，在标签内设置style属性</li><li><strong>内部样式表</strong>：在head标签中<style>…</style></li><li><strong>外部样式表</strong>:@import url( “外部样式文件名称”);</li><li><strong>链接外部样式表</strong> <link rel="stylesheet" type="text/css" href="路径"></li></ol><h3 id="css继承与层叠"><a href="#css继承与层叠" class="headerlink" title="css继承与层叠"></a><strong>css继承与层叠</strong></h3><p>css的三大特性：继承、层叠、优先级</p><p>css继承：<a href="https://www.zhihu.com/search?q=%E5%AD%90%E6%A0%87%E7%AD%BE&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2300568512%7D">子标签</a>会继承父标记的所有样式风格，并且可以在父标记样式风格的基础上再加以修改，产生新的样式，而<a href="https://www.zhihu.com/search?q=%E5%AD%90%E6%A0%87%E8%AE%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2300568512%7D">子标记</a>的样式风格完全不影响父标记，对于继承，我们可以联想java中的继承，当子类继承父类时，可以重写父类的方法，也可以新加方法，但是重写的方法不会影响父类的方法。（可以继承text-\font-\line-这些元素开头的，以及color属性）</p><p><strong>行高继承</strong>：行高可跟单位也可不跟单位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: antiquewhite</span><br><span class="language-css">            font：<span class="hljs-number">12px</span>/<span class="hljs-number">1.5</span> <span class="hljs-string">&#x27;宋体&#x27;</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>座右铭<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>靡不有初，鲜克有终<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>层叠：解决样式冲突，后来者居上原则，显示优先级高的， 后加 !import 改变优先级</p><p>层叠性理解成“冲突”的解决方案，即对同一内容设置了多个不同样式产生冲突时的处理</p><p><strong>优先级：行内样式&gt;id样式&gt;class样式&gt;标记样式</strong> 权重：标记1 class10 id100 行内1000</p><h2 id="第二章-div和span"><a href="#第二章-div和span" class="headerlink" title="第二章 div和span"></a><strong>第二章 div和span</strong></h2><div></div>是大盒子，独占一行，意为分区、分节的意思<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a><strong>定位</strong></h3><p><strong>div 的css中有：</strong></p><p><strong>1.position属性（定位模式），当值为：</strong></p><ol><li><strong>relative时，可以用top、left来设置div在页面中的偏移，不可以使用层叠</strong> （相对定位：是元素在移动位置的时候，相对于他原来的位置来说的）</li><li><strong>absolute时，可以用top、left 对div进行绝对定位</strong></li><li><strong>fixed时，固定</strong></li><li><strong>static，静态</strong></li></ol><p><strong>2.float属性</strong>：浮动，向左或向右</p><p><strong>3.clear属性：</strong>清除图层内浮动，与浮动属性是一对作用相反的属性</p><p><strong>4.z-index属性：</strong>图层上下层关系，实现多个图层层叠效果，z-index值越大，图层位置越高，子层位于父层之上</p><p><strong>应用</strong></p><h3 id="定位的组成："><a href="#定位的组成：" class="headerlink" title="定位的组成："></a><strong>定位的组成：</strong></h3><p><strong>定位：</strong>将盒子定在某一位置，所以定位也是在摆放盒子，按照定位的方式移动盒子。</p><p><strong>定位&#x3D;定位模式+边偏移</strong></p><p>边偏移就是定位的盒子移动到最终位置，属性：top bottom left right （浮动没有这些属性）</p><p><strong>定位模式用于指定一个元素在文档中的定位方式。边偏移则决定了该元素的最终位置</strong></p><p><span></span>小盒子，可以多个小盒子并排</p><p>div是块级元素，能简化页面布局， 是页面代码更具可读性</p><p>所有元素都可以看成是一个盒子</p><h2 id="第三章-css样式属性"><a href="#第三章-css样式属性" class="headerlink" title="第三章 css样式属性"></a><strong>第三章 css样式属性</strong></h2><h3 id="css属性值中的单位："><a href="#css属性值中的单位：" class="headerlink" title="css属性值中的单位："></a><strong>css属性值中的单位：</strong></h3><p><strong>单位的取舍在很大程度上取决于用户的显示器和浏览器，不恰当的使用单位会给页面布局带来很多麻烦。</strong></p><p>绝对单位：英寸、厘米、毫米、磅和pica(皮卡) 1pc&#x3D;12pt(12点活字)设置字体大小 1pt&#x3D;1&#x2F;72in 1in&#x3D;2.54cm</p><p>相对单位：em表示字体的高度,针对当前元素 rem表示字体针对根元素而言，默认是 16px</p><p>ex表示所使用的的字体中小写字母x的高度作为参考，一般通过em&#x2F;2得到</p><p>px:像素，一般来说，设的值越大，清晰度越高</p><p>百分比：通过另一个自来计算，一般参照父元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>        body&#123;<br>            color: antiquewhite<br>            font：12px/1.5 &#x27;宋体&#x27;;<br>        &#125;<br>        div&#123;<br>            font-size:14px;   //行高14*1.5=21px<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>座右铭<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>靡不有初，鲜克有终<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="css字体样式"><a href="#css字体样式" class="headerlink" title="css字体样式"></a><strong>css字体样式</strong></h3><p>最开始是使用HTML标签里的<font>标签来设置字体的样式，但是这样会导致网页过胖，维护困难，随着css的出现，渐渐地就把font当成属性样式放在css里，使得内容与表现相分离，但是css中的字体样式毕竟较少，而且如果用户没有安装该字体，则无法正常显现该字体，于是在css3中添加了@font-face，并通过这一方式，只要浏览器给出该字体的路径便可以显示字体的风格，不用客户安装该字体</p><p>font-size：字体大小</p><p>font-style：normal，只要是消除默认样式 italic:斜体显示文字 oblique：倾斜字体显示</p><p>区别：所有字体都有italic这一属性也就是说没有italic这一属性的字体无法呈现斜体风格，只能用oblique来显示斜体</p><p>font-family:字体一、字体二、。。。如果用户端的网页没有下载字体一，就会看看有没有下载字体二，依次往下，都没有默认宋体</p><p>font-variant：字体变形，主要用于设置英文字体，实际上是设置文本字体是否为小型的大写字母</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-variant</span>: small-caps;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>WRERWEwewhe wihvi<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://picx.zhimg.com/80/v2-cf98c60c6364cbb6369d554630e11833_720w.jpg?source=1940ef5c" alt="img"></p><p>font-weight：字体粗细 可替代html中的<strong></strong> <b></b> normal,bold.bolder,lighter,100~900越小越细，越大越粗</p><h3 id="css文本样式"><a href="#css文本样式" class="headerlink" title="css文本样式"></a><strong>css文本样式</strong></h3><p>字符间距letter-spacing：normal 长度单位 （字符和字符的间距） word-spacing：针对英文，<strong>如果里面有中文，不能呈现字符和字符的间距</strong> letter-spacing：中英文都可，可以呈现字符的间距</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">word-spacing</span>: <span class="hljs-number">11em</span>;</span><br><span class="language-css">           <span class="hljs-comment">/* letter-spacing: 11em; */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>usfugaeru猪猪侠我的天哪<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行结果：usfugaeru猪猪侠我的天哪</p><p>还有一种带有空格代码结果：usfugaeru 猪猪侠我的天哪</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">word-spacing</span>: <span class="hljs-number">11em</span>;</span><br><span class="language-css">           <span class="hljs-comment">/* letter-spacing: 11em; */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>usfugaeru 猪猪侠我的天哪<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行结果：usfugaeru 猪猪侠我的天哪（空格间距11em）</p><p>行距line-height:百分比基于字体高度，可以为负值</p><p>首行缩进：text-indent 是字体的两倍 缩进5个空格<blockquote></blockquote></p><p>字符装饰text-decoration：none（取消默认样式） underline：下划线 代替html中的<u></u> <ins></ins> line-through：删除线 代替html中的<del></del></p><p>英文大小写转换 text-transform : capitalize 将每个单词的第一个字母变成大写 uppercase：转大写</p><h2 id="第四章-Div-css页面布局"><a href="#第四章-Div-css页面布局" class="headerlink" title="第四章 Div+css页面布局"></a><strong>第四章 Div+css页面布局</strong></h2><p>display：none和visibility：hidden 的区别：前者是不占据物理空间，后者占据物理空间</p><p>display：block和visibility：visible 将隐藏的对象显示</p><p>导航栏和菜单：用ul 和a 来实现</p><p>二级菜单可用列表嵌套</p><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a><strong>盒子模型</strong></h3><p>盒子模型：内容（content)：内容区是CSS盒子模型的中心，它呈现了盒子的主要信息内容，是盒子模型的必备组成部分，其他三个都是可选的</p><p>内边距（padding）</p><p>外边距(margin）：指的是两个盒子之间的距离，他可能是子元素与父元素之间的距离，也可能兄弟元素之间的距离。</p><p>边框（border）</p><p>所有元素都可以看成是一个盒子！</p><h2 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a><strong>CSS盒子模型</strong></h2><h3 id="标准盒模型（content-box"><a href="#标准盒模型（content-box" class="headerlink" title="标准盒模型（content-box)"></a><strong>标准盒模型（content-box)</strong></h3><p>不包括padding和border，</p><p><strong>盒子在网页中实际占用：</strong></p><p>宽：width+2×padding+2×border+2×margin</p><p>高：height+2×padding+2×border+2×margin</p><p><strong>盒模型实际大小：</strong></p><p><img src="D:\Blog\source_posts\post_img\web01.jpg" alt="img"></p><p>宽：width+2×padding+2×border</p><p>高：height+2×padding+2×border</p><h3 id="IE盒模型-border-box"><a href="#IE盒模型-border-box" class="headerlink" title="IE盒模型(border-box)"></a><strong>IE盒模型(border-box)</strong></h3><p><img src="https://pica.zhimg.com/80/v2-7154fc2b3fb024b92868211fbf752cdd_720w.jpg?source=1940ef5c" alt="img"></p><p>包括padding和border，不同的浏览器对盒子解析不同，为了规范化，我们需要在文档的头部加上DOCTYPE声明，然后浏览器都可以显示“标准W3C盒模型”</p><p>宽：width</p><p>高：height</p><p><strong>盒子模型的计算方法：</strong></p><p><img src="https://pica.zhimg.com/80/v2-80bf24ccb7ed8f65e46b93140cff04f8_720w.jpg?source=1940ef5c" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-0fe4bcef63c2a85704fb5aaea74c44ab_720w.jpg?source=1940ef5c" alt="img"></p><h3 id="盒子在标准流中的定位原则："><a href="#盒子在标准流中的定位原则：" class="headerlink" title="盒子在标准流中的定位原则："></a><strong>盒子在<a href="https://www.zhihu.com/search?q=%E6%A0%87%E5%87%86%E6%B5%81&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2300568512%7D">标准流</a>中的定位原则：</strong></h3><h3 id="行元素之间的水平margin"><a href="#行元素之间的水平margin" class="headerlink" title="行元素之间的水平margin"></a><strong>行元素之间的水平margin</strong></h3><p>两个<strong>相邻行元素</strong>之间，<strong>他们的间距&#x3D;第一个行元素的margin-right加上第二个行元素的margin-left</strong></p><h3 id="块元素之间的竖直margin"><a href="#块元素之间的竖直margin" class="headerlink" title="块元素之间的竖直margin"></a><strong>块元素之间的竖直margin</strong></h3><p>由于块元素是上下排列的，所以块元素计算的是两个相邻块的垂直距离。在块元素之间存在一种特殊的现象，称之为“塌陷”，因此，两个相邻块之间的垂直距离只取margin-bottom与margin-top中较大的那个数值。</p><h3 id="嵌套盒子间的margin"><a href="#嵌套盒子间的margin" class="headerlink" title="嵌套盒子间的margin"></a><strong>嵌套盒子间的margin</strong></h3><p>嵌套盒子与父盒子对应<a href="https://www.zhihu.com/search?q=%E8%BE%B9%E8%B7%9D%E7%A6%BB&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2300568512%7D">边距离</a>&#x3D;父盒子的padding+子盒子的margin值</p><h2 id="border属性："><a href="#border属性：" class="headerlink" title="border属性："></a><strong>border属性：</strong></h2><p><strong>区分 border：0和border：none；</strong></p><p><strong>主要体现在性能差异和兼容差异：</strong></p><p><strong>1.性能差异：</strong></p><p>border:0 表示把border定义为0px。虽然0px在页面上看不见，但是浏览器依然会对border进行渲染，渲染之后，实际上是一个像素为“0”的border。</p><p>也就是说border：0 需要占内存。</p><p>border：none 表示把border定义为none，浏览器解析border：none时，不会做出渲染，即不用占内存。</p><p><strong>2.兼容差异：</strong></p><p>兼容性差异只存在于IE6和IE7的<input type="button">标签以及<button>标签中，其他浏览器不存在兼容问题</p><p>border：0 在所有浏览器中的效果都一样，都是把隐藏框隐藏（不是去掉）</p><p>border：none 对IE6和IE7按钮的边框无效，在其他浏览器则会去掉按钮的边框</p><h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a><strong>padding</strong></h2><p>内边距padding，又常常称为“补白”，他指的是内容区到边框之间的那一部分，关于背景图片的使用有时会涉及padding的一个小技巧。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../img/DatePicker_arrow_next.png</span>);</span><br><span class="language-css">            <span class="hljs-attribute">background-repeat</span>: no-repeat;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">127px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>商会状况<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="D:\Blog\source_posts\post_img\web05.jpg" alt="img"></p><p>当一个元素使用背景图的时候，该元素的文字内容会停留在左边，如果想要达到预期效果，可以使用padding来实现：</p><p>运行结果：</p><p><img src="D:\Blog\source_posts\post_img\web06.jpg" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../img/DatePicker_arrow_next.png</span>);</span><br><span class="language-css">            <span class="hljs-attribute">background-repeat</span>: no-repeat;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">127px</span>;   <span class="hljs-comment">/*127-55=72*/</span></span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">55px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>商会状况<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>web前端</title>
    <link href="/2022/03/04/web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/03/04/web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="第一章-html基础"><a href="#第一章-html基础" class="headerlink" title="第一章 html基础"></a><strong>第一章 html基础</strong></h2><p>HTML文档结构里面最主要的就是头部head和主体body</p><p>head中的信息是不可见的，而body里面的信息是用户可见的，因此在开发中开发者更倾向于将一些隐蔽的信息放在head中</p><p>在头部head中有两个比较重要的标签，分别是<title>标签是显示在网页标题栏上，让网页拥有自己的标题 和<meta charset="utf-8">元信息标签，如果没有meta标记会出现乱码</p><p>元信息meta标记是用来描述网页文档的属性，这些信息并不会出现在网页中，也就呼应了head标签中的信息客户不可见。</p><p>meta 的http-equiv属性：用于提供HTTP协议的响应头报文，他回应给浏览器一些有用的信息以帮助正确和精确地显示网页内容</p><p>body中主要属性有topmargin，bgcolor等属性，但是基本上都不会在HTML的元素中设置了，而是在css中对元素进行装饰，这样，可以实现结构和样式相分离，有利于后期维护。</p><p>html是超文本标记语言，侧重标签的使用，即语义的规范化，比如说要想实现文字的加粗效果虽然用h1也可以实现，但是违背了HTML的初衷，因此还是注意标签的语义化，用p标签以及css的font-weight属性来实现</p><p>标记类型：单标记 双标记（嵌套关系（父子）、并行关系（兄弟）</p><p>注释：为了提高代码的可读性，有利于代码的维护</p><p>注释标签<comment></comment>不建议使用，因为在一些浏览器中该标签的内容也会显示在页面中.可以使用<!-- -->注释</p><p>html5不在基于SGML(标准通用标记语言),所以</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;!DOCTYPE&gt;声明文档类型，告诉浏览器是使用html5规范   <br></code></pre></td></tr></table></figure><h2 id="第二章-格式化文本与段落"><a href="#第二章-格式化文本与段落" class="headerlink" title="第二章 格式化文本与段落"></a><strong>第二章 格式化文本与段落</strong></h2><p><strong>网页内容的排版包括文本格式化、段落格式化和整个页面的排版格式化，这是设计一个网页的基础。文本格式化标记分为字体标记、文字修饰标记。字体标记和文字修饰标记包括对于字体样式的一些特殊修改。</strong></p><p><strong>文本格式化标签（突出重要性，比普通文字更重要）</strong>：</p><p><b></b>\ <strong></strong>粗体 <strong>标签语义更好在css中可以用font-weight属性</p><p><em></em> <i></i>斜体 <em>语义更好在css中使用font-style:oblique&#x2F;italic 区别：</p><p><ins></ins> <u></u> 下划线 <ins>语义更好</p><p><del></del>删除线 在css中使用text-decoration:line-throught;</p><p><strong>段落格式分为</strong></p><p>**1. 段落标记<p>**：单独占行，块元素</p><p><strong>2. 换行标记</strong> <strong>3. 水平分隔线标记<hr/></strong></p><p>标题字<h1>~<h6>:重要性从高到底，字号从小到大，一个网页只能有一个h1标签，如果有多个<h1>标签，会被搜索引擎认为作弊。但是在HTML5中，不同的<section></section>都可以带有一个<h1></h1>标签</p><p>注意：</p><p>:<ol><li>文本在一个段落中会根据浏览器窗口的大小自动换行</li><li>段落和段落之间保有空隙</li></ol><p><br>:</p><ol><li>强制换行</li><li>br标签是个单标签</li><li>br标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距（段落和段落之间有空隙，但是换行没有空隙）换行标签只能在<p>标签中使用</li></ol><h3 id="字体font的来源与进化"><a href="#字体font的来源与进化" class="headerlink" title="字体font的来源与进化"></a><strong>字体font的来源与进化</strong></h3><p>字体一开始是在html中定义的，在html中使用<font>双标记并在标记内使用color等属性对字体进行修饰，由于将大量的样式写在html中造成html中的代码过多，不利于后期维护，渐渐地就将字体的样式作为属性放在css中，这样也可以对其他元素的字体进行装饰，而不仅限于<font>标签，但是捏。。。css中的字体又不够多，就算有 客户端未安装该字体，在网页中也不能显示，为了解决这一问题，css3中便出现了@font-face技术 就算客户端没有下载该字体，只需要提供字体路径，那么客户的网页中也能显示该字体。</p><p>排版标签：</p><ol><li>定义预格式文本<pre></pre></li><li>段落缩进<blockquote></blockquote>:块元素，首行缩进5个英文字符的位置</li></ol><p>添加空格与特殊符号：</p><ol><li>&amp;nbsp ; 空格</li><li>&amp;copy； 版权</li><li>&amp;reg； 注册商标</li><li>&amp;lt ; 小于&lt;</li><li>&amp;gt ; 大于&gt;</li></ol><h2 id="第三章-列表"><a href="#第三章-列表" class="headerlink" title="第三章 列表"></a><strong>第三章 列表</strong></h2><p>使用列表：网页更加简洁美观，具有层次感，列表可嵌套</p><p>有序列表 <ol><li></li></ol> 不能在<ol>标签和<li>标签之间添加文本信息，<strong>设置有序列表的start属性可以改变编号的起始值</strong>。 <strong>value：改变当前列表项前的编号值，并影响其后所有列表项编号的值</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> &gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>ff<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ff<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ff<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ff<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>ftfhth<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-0fb0097dc480efeabe9ac345e5c9af3e_720w.jpg?source=1940ef5c" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;A&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> &gt;</span>ff<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>ff<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ff<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ff<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ff<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-aa56368710decf9ca023afc1f2f04137_720w.jpg?source=1940ef5c" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;A&quot;</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> &gt;</span>ff<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> &gt;</span>ff<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ff<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ff<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ff<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-b08663bb6f23f1d98d2430344f3360dd_720w.jpg?source=1940ef5c" alt="img"></p><p>start:是定义在ol中的，value是定义在li中的</p><p>无序列表 <ul><li></li></ul> 属性type 默认是<a href="https://www.zhihu.com/search?q=%E5%AE%9E%E5%BF%83%E5%9C%86&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2300568512%7D">实心圆</a>disc ，不能在<ul>和<li>之间添加文本信息</p><p>自定义列表<dl><dt>项目名</dt><dd>描述</dd></dl>，列表项前面没有编号也没有符号</p><p>无序列表的应用：可以设置导航栏 ，菜单（导航栏也可以用nav标签）</p><p>注意：<ul>的type属性控制全局，<li>的type属性控制该条项目</p><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a><strong>列表标签</strong></h3><p>表格是用来显示数据的，那么列表就是用来布局的</p><p>列表最大的特点就是整齐有序，他作为布局会更加自由和方便</p><p>*<em>无序列表、有序列表：</em></p><ol><li>无序列表的各个列表项之间没有顺序级别之分，是并列的</li><li><ul></ul>或<ol></ol>中只能嵌套<li></li>,直接在<ul></ul>或<ol></ol>标签中输入其他标签或者文字的做法是不被允许的</li><li><li></li>之间相当于一个容器，可以容纳所有的元素（即li中可放p标签等，但是ul标签只能放li标签）</li><li>无序列表会带有自己的样式属性，但是在实际开发中我们采用css来消除默认样式</li></ol><p>*<em>自定义列表</em>：</p><p><a href="https://www.zhihu.com/search?q=%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2300568512%7D">自定义列表</a>的使用场景：自定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p><p><img src="https://pic1.zhimg.com/80/v2-f9991685cf0e6c6c3b8e270eefd0f120_720w.jpg?source=1940ef5c" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-6b0cc4adf4e93aca46c4f5c627cb2719_720w.jpg?source=1940ef5c" alt="img"></p><ol><li><dl></dl>里面只能包含<dt>和<dd></li><li><dt>和<dd>个数没有限制，经常是一个<dt>对应多个<dd> (<dt>和<dd>是兄弟关系，<dt><dd>里面可以放任意标)</li></ol><h2 id="第四章-超链接与浮动框架"><a href="#第四章-超链接与浮动框架" class="headerlink" title="第四章 超链接与浮动框架"></a><strong>第四章 超链接与浮动框架</strong></h2><p>在HTML标签中，<a>标签用于定义超链接，作用是从一个页面链接到另一个页面</p><ol><li><p>链接的语法格式<br><a href="跳转目标" target=“目标窗口的弹出方式“></a><br>两个重要属性:</p></li><li><ol><li>href 用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，他就具有了超链接的功能</li><li>target 用于指定链接页面的打开方式，其中_self为默认值，__blank表示在新窗口中打开 _top在顶层框架内打开链接（在根框架中打开）</li></ol></li><li><p>链接的分类：</p></li><li><ol><li><p>外部链接：指网站内的文件链接到站点内容外的文件,要加http：\</p></li><li><p>内部链接：指网站内部文件之间的链接，不用加http:\</p></li><li><p>空链接：#</p></li><li><p>下载链接：如果href里面地址是一个文件或者压缩包，会下载这个文件</p></li><li><p>网页元素的链接：在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接</p></li><li><p>锚点链接(书签链接）：点击链接可快速定位到页面中的某个位置</p></li><li><ol><li>在链接文本的href属性中，设置属性值为 #名字 的形式，如<a href="#two">第二集</a></li><li><a href="#书签名"></a> 用一个页面<br><a href="URL#书签名"></a> 不同页面<br><a name="书签名"></a></li></ol></li></ol></li><li><ol><li>电子邮寄链接：&lt;a href&#x3D;”mailto:E-mail地址[?subject&#x3D;邮件主题[&amp;参数&#x3D;参数值]]”</li><li>首页用index.html来命名</li></ol></li></ol><p>路径：1. 上一级..&#x2F;</p><p>2.下一级&#x2F;</p><p>3.同级 链接的文档</p><p>网站内部链接一般使用相对路径，当然根路径也可以用于内部链接；外部链接一般使用绝对路径</p><h3 id="浮动框架"><a href="#浮动框架" class="headerlink" title="浮动框架"></a><strong>浮动框架</strong></h3><iframe></iframe>内联框架：<ol><li>src属性：源文件路径</li><li>name：框架名称</li></ol><iframe scr=" 路径 " name=" 框架名" width=“ ” height=“ ”></iframe><p><a href=" " target="框架名"></a></p><p>应用场景：一个页面里面嵌套另一个页面，盗版影视网站，里面有些小视频，可以利用浮动框架来实现，也可以使用<radio></radio> \ <audio></audio>实现，两者区别在于浮动框架可以实现跳转，而后两个标签的使用是嵌在本页面里面</p><h2 id="第五章-图像与多媒体文件"><a href="#第五章-图像与多媒体文件" class="headerlink" title="第五章 图像与多媒体文件"></a><strong>第五章 图像与多媒体文件</strong></h2><img src=" " alt=" " title=" "><p>alt和title区别：alt是替换文本 title是提示文本，一定要有src和alt</p><p>img是<a href="https://www.zhihu.com/search?q=%E5%8D%95%E6%A0%87%E7%AD%BE&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2300568512%7D">单标签</a>，一般只设置宽或高，两个一起设会失真</p><p>图片高度、宽度可以是px也可以是百分比</p><p>src 和 alt 是必须属性，alt的作用是为了当图片显示不出来时，减少损失</p><p>src：指定路径和文件名</p><p>图片标签可以拥有多个属性，属性名放在标签名之后，属性名之间可以用空格分开</p><h3 id="设置图像对齐方式："><a href="#设置图像对齐方式：" class="headerlink" title="设置图像对齐方式："></a><strong>设置图像对齐方式：</strong></h3><p>水平对齐：left、center、right</p><p>垂直方式：top、middle、bottom （注：middle是垂直的，center是水平）</p><h3 id="设置图像间距："><a href="#设置图像间距：" class="headerlink" title="设置图像间距："></a><strong>设置图像间距：</strong></h3><p>hspace水平距离 vspace垂直间距（注意：两者均<strong>以像素为单位</strong>，在<strong>编写代码时不用给属性值加上单位px,否则不会产生效果</strong>）、</p><h3 id="设置图像热区链接：（map-框架设置）"><a href="#设置图像热区链接：（map-框架设置）" class="headerlink" title="设置图像热区链接：（map 框架设置）"></a><strong>设置图像热区链接：（map 框架设置）</strong></h3><p>包含热区的图像可以称为映射图像，要和<map>标签一起用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/callUS.jpg&quot;</span> <span class="hljs-attr">usemap</span>=<span class="hljs-string">&quot;#icon&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;150&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;3&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;icon&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.html&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;50,50,30&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>shape：rect 矩形区域 circle圆形区域 poly多边形区域</p><p>coords:x1,y1,x2,y2代表矩形顶点坐标 center-x,center-y，radius代表圆心和半径 x1,y1,x2,y2,…xn,<a href="https://www.zhihu.com/search?q=yn&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2300568512%7D">yn</a>代表各顶点坐标</p><h3 id="滚动文字（该标签在有些浏览器不兼容）"><a href="#滚动文字（该标签在有些浏览器不兼容）" class="headerlink" title="滚动文字（该标签在有些浏览器不兼容）"></a><strong>滚动文字（该标签在有些浏览器不兼容）</strong></h3><p>marquee标记是成对标记，以<marquee>开始，以</marquee>结束，将需要滚动的内容放在marquee中， onMouseOver&#x3D;”this.stop()”属性值对 的作用：当鼠标光标移动到滚动文字区域时，滚动文字将暂停滚动；</p><p>onMouseOut&#x3D;”this.start()”属性值对 的作用：当鼠标光标移出滚动文字区域时，滚动文字将继续滚动；</p><p>loop&#x3D;-1无限滚动</p><p>direction：up向上滚动 down向下滚动 left：向左滚动 right：向右滚动</p><p>behavior：scroll 循环往复滚动 slide滚动一次就停止 alternate 来回交替滚动</p><h3 id="音频、视频及Flash文件"><a href="#音频、视频及Flash文件" class="headerlink" title="音频、视频及Flash文件"></a><strong>音频、视频及Flash文件</strong></h3><p>可以使用<embed></embed>标记（有些浏览器不兼容，定义为内嵌对象） html5中有video、audio元素（针对浏览器有不同的兼容格式）</p><p>embed标签：如果客户未安装插件，无法播放音频，即使把文件转化为其他格式，仍然无法在所有浏览器中播放</p><p>audio标签：必须把音频文件转化为不同的格式，但是在老式浏览器中不起作用，可以回退尝试<embed>元素，但是<embed>标签不能回退</p><p>应用场景：背景音乐、网页视频。。。。。</p><h2 id="第六章-表格"><a href="#第六章-表格" class="headerlink" title="第六章 表格"></a><strong>第六章 表格</strong></h2><p>表格主要用于显示、展示数据，（很久以前用来设置布局，现已弃用）因为他可以让市局显示得非常规整，可读性非常好。特别是后台展示数据的时候，能够熟练运用表格就闲得很重要。</p><p><strong>表格不是用来布局的，而是用来展示数据的。</strong></p><h3 id="表格的基本语法"><a href="#表格的基本语法" class="headerlink" title="表格的基本语法"></a><strong>表格的基本语法</strong></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;table&gt;<br>    &lt;caption&gt;表格标题&lt;/caption&gt;<br>    &lt;thead&gt;<br>        &lt;tr&gt;<br>            &lt;th&gt;表头&lt;th&gt;<br>            &lt;th&gt;表头&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/tbody&gt;<br>    &lt;tfoot&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/tfoot&gt;<br>&lt;/table&gt;<br></code></pre></td></tr></table></figure><ol><li><table></table>是用于定义表格的标签</li><li><tr></tr>标签用于定义表格中的行，必须嵌套在<table></table>标签中</li><li><td></td>用于定义表格中的单元格，必须嵌套在<tr></tr>标签中</li><li><p>字母td指表格数据（table data），即数据单元格的内容</p></li><li><p>表头单元格内的信息<strong>加粗居中</strong>，突出其重要性</p></li><li><p>单元格里面可以放任何元素，文字、图片、链接均可</p></li></ol><p><strong>表格的发展与进化</strong></p><p>表格最初是用来布局，但是渐渐地不再使用表格进行布局，布局方式可采用多列布局，网页布局，弹性布局，响应式等，HTML是超文本标记语言，他侧重于语义化，而表格的作用是用来分析展示数据的，因此不用表格布局，css中对表格的一些属性进行了扩展，如：表格边框的合并，表格边框的间距。。。</p><h3 id="表头单元格标签"><a href="#表头单元格标签" class="headerlink" title="表头单元格标签"></a><strong>表头单元格标签</strong></h3><p>一般表头单元格位于表格的第一行或第一列，表头单元格里面的文本内容加粗居中显示</p><th>标签表示HTML表格的表头部分（table head 的缩写）<h3 id="表格相关属性-html–-gt-css"><a href="#表格相关属性-html–-gt-css" class="headerlink" title="表格相关属性 (html–&gt;css)"></a><strong>表格相关属性 (html–&gt;css)</strong></h3><p>html中：</p><p>在table标签内写这些属性：</p><p>align（位置）：left center right</p><p>border（边框）：</p><p>cellpadding(单元格边距padding称为内边距cell是单元格 cellpadding单元格边距): 文字到单元格边框的距离</p><p>cellspacing（单元格间距）: 单元格和单元格的距离 &#x3D;0 <strong>相当于css中的 table{border-collapse：collapse}</strong></p><p>css中：</p><p>表格边框合并：在table中设置border-collpase属性的值为collpase (巧记：丛林里coll怕pa蛇se)</p><h3 id="HTML5中：语义化更强："><a href="#HTML5中：语义化更强：" class="headerlink" title="HTML5中：语义化更强："></a><strong>HTML5中：语义化更强：</strong></h3><p>将表格分割成 表格头部、表格主体、表格页脚，有时候表脚可不要，在表格标签中，分别用<thead></thead> <tbody></tbody> <tfoot></tfoot>来表示，这样可以更好地分清表格结构</p><p><strong>表格结构标签</strong></p><thead></thead>:用于定义表格的头部。<thead>内部必须拥有<tr>标签。一般是位于第一位<tbody></tbody>:用于定义表格主体，主要用于放数据本体<tfoot></tfood>:用于定义表尾，主要用于求和，求总数<h3 id="表格行内容对齐方式"><a href="#表格行内容对齐方式" class="headerlink" title="表格行内容对齐方式"></a><strong>表格行内容对齐方式</strong></h3><p>水平对齐（align）：left center right</p><p>垂直对齐（valign)：top middle bottom</p><h3 id="表格单元格属性"><a href="#表格单元格属性" class="headerlink" title="表格单元格属性"></a><strong>表格单元格属性</strong></h3><p><strong>表格跨行属性</strong></p><p>rowspan&#x3D;“合并单元格数”</p><p><strong>表格跨列属性</strong></p><p>colspan&#x3D;”合并单元格数”</p><p><img src="D:\Blog\source_posts\post_img\web04.jpg" alt="img"></p><p><strong>目标单元格：</strong></p><p>假设一行有k个单元格，当设置某一单元格跨了n行时，其下n-1行只有k-1个<td></td></p><p>跨行：最上侧单元格为目标单元格，用来写合并代码rowspan</p><p>跨列：最左侧单元格为目标单元格，用来写合并代码colspan</p><p><strong>合并单元格步骤：</strong></p><ol><li>跨行还是跨列</li><li>再到目标单元格：td标签内写 合并代码 <td rowspan='2'></li><li>跨k行：其下只有k-1行内只有n-1个单元格<br>跨k列，本行只有n-k+1个单元格</li></ol><h2 id="第七章-表单"><a href="#第七章-表单" class="headerlink" title="第七章 表单"></a><strong>第七章 表单</strong></h2><p>Web网页中，表单主要是用来收集用户信息，做网络调查，注册。。。、</p><p>用户通过浏览器浏览网页信息，但网站不能与用户进行交互收集用户信息，用户除了可以通过邮件发送以外，最有效的方法就是在网站上设计表单。用户通过填写表单将信息提交给服务器，服务器接收到信息之后，将用户信息存储到数据库，管理员可以通过数据库获取到用户信息，这样局可以完成一次交互。</p><p>利用表单可以在HTML中插入一些表单控件（元素），完成各类信息的采集</p><p>field:领域 fieldset:将文字和表单输入框连起来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;index1_1.html&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">“</span>  ” &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>用户信息<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>                用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;  &quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;  &quot;</span> <span class="hljs-attr">required</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>纳兰诗集<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>仓央嘉措<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot; &quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot; &quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot; &quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;个人简历&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>maxlength 属性：最多填写字符</p><p>size属性：输入框的长度</p><p>表单的组成：表单域、表单控件（元素）、提示信息这3部分组成</p><p>表单域包含表单控件和提示信息</p><p><strong>textarea不是input 的type属性的值</strong></p><p>post：安全的，速度相对较慢</p><p>get：不安全，速度快</p><h3 id="定义域和域标签"><a href="#定义域和域标签" class="headerlink" title="定义域和域标签"></a><strong>定义域和域标签</strong></h3><p>利用<strong>fieldset标记可以在网页上定义域</strong>，在表单中适用域可以将表单相关元素进行分组，<strong>legend标记为fileset标记定义域标题</strong>，书签效果，裸奔时可读性高</p><p>fileset标记将表单内容的一部分打包，为什么是一部分？？因为表单可以定义很多个域呀~，并生成一组相关表单的字段（javaweb中，将用户信息存到数据库中）</p><h3 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a><strong>表单域</strong></h3><p>表单域是一个包含表单元素的区域。</p><p>在HTML标签中，<form>&lt;&#x2F; form&gt;用于定义表单域，以实现用户信息的收集和传递，并将收集到的数据提交给服务器</p><h3 id="表单元素（控件）"><a href="#表单元素（控件）" class="headerlink" title="表单元素（控件）"></a><strong>表单元素（控件）</strong></h3><ol><li>input 输入表单元素</li><li>select下拉表单元素 multiple规定可选择多个选项</li><li>textarea文本域元素</li></ol><h3 id="表单信息输入"><a href="#表单信息输入" class="headerlink" title="表单信息输入"></a><strong>表单信息输入</strong></h3><p>表单的主要功能是为用户提供一个输入信息的接口，将用户输入信息发送到服务器并等待服务器响应，input标签主要有name和type属性等。</p><p>input （一定要有type）：单行文本输入框、密码框、单选 checked 、复选checkbox checked、按钮（与JS一起用）、提交submit、文件、隐藏框、重置 不会将默认去掉</p><p>select：下拉表单元素，要和option一起用</p><p>textarea：多行文本域</p><p>对于单选而言 name要一样，value不同，多选（复选）name、value都不同 会将value值提交到服务器（数据库）</p><p>隐藏框在页面中不可见但是会将信息提交到后台服务器中</p><p>对于单选、复选而言，name和value一定要设置</p><p>按钮一定要有value name onclick （onclick的值不能为click）</p><p>单行文本框设置value，默认在输入前有信息，可删</p><p>label标签（双），提高用户体验</p><p>sumbit 将信息提交到服务器</p><h3 id="多行文本输入框"><a href="#多行文本输入框" class="headerlink" title="多行文本输入框"></a><strong>多行文本输入框</strong></h3><p>一定要设置rows &#x3D;“ ” cols&#x3D;” “ wrap&#x3D;”soft|hard” 可以用css控制：</p><p>可在表单中嵌套表格</p>]]></content>
    
    
    <categories>
      
      <category>web前端基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
